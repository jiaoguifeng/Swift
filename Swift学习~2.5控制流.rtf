{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf140
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset134 STHeitiSC-Light;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww22620\viewh18160\viewkind0
\deftab866
\pard\tx866\pardeftab866\pardirnatural

\f0\fs36 \cf0 \CocoaLigature0 2.5 
\f1 \'bf\'d8\'d6\'c6\'c1\'f7\'d1\'a7\'cf\'b0\'b1\'ca\'bc\'c7
\f0 \
\
import Foundation\
\
/* 
\f1 \'bf\'d8\'d6\'c6\'c1\'f7
\f0  */\
/*\
for
\f1 \'d1\'ad\'bb\'b7\'a3\'ac
\f0 while
\f1 \'d1\'ad\'bb\'b7\'a3\'ac
\f0 break
\f1 \'a3\'ac
\f0 continue for-in
\f1 \'d1\'ad\'bb\'b7
\f0 \
*/\
\
//for
\f1 \'d1\'ad\'bb\'b7
\f0 \
let base = 3\
let power = 10\
var answer = 1\
for _ in 1...power\
\{\
    answer *= base\
\}\
println(answer)\
\
for var index = 0;index < 3;++index\
\{\
    println("index is \\(index)")\
\}\
\
\
//while
\f1 \'d1\'ad\'bb\'b7
\f0 \
\
//do-while
\f1 \'d1\'ad\'bb\'b7
\f0 \
   //while
\f1 \'d1\'ad\'bb\'b7\'b5\'c4\'c1\'ed\'cd\'e2\'d2\'bb\'d6\'d6\'d0\'ce\'ca\'bd\'a3\'ac\'cb\'fc\'ba\'cd
\f0 while
\f1 \'b5\'c4\'c7\'f8\'b1\'f0\'ca\'c7\'d4\'da\'d1\'ad\'bb\'b7\'cc\'f5\'bc\'fe\'d6\'ae\'c7\'b0\'a3\'ac\'cf\'c8\'d6\'b4\'d0\'d0\'d2\'bb\'b4\'ce\'d1\'ad\'bb\'b7\'b5\'c4\'b4\'fa\'c2\'eb\'bf\'e9\'a3\'ac\'c8\'bb\'ba\'f3\'d6\'d8\'b8\'b4\'d1\'ad\'bb\'b7\'d6\'b1\'b5\'bd\'cc\'f5\'bc\'fe\'ce\'aa
\f0 false\
\
//if
\f1 \'d3\'ef\'be\'e4
\f0 \
var temperatureInFabrenheit = 30\
if temperatureInFabrenheit <= 32\
\{\
    println("It's very cold.Consider wearing a scarf.")\
\}\
\
//Switch
\f1 \'d3\'ef\'be\'e4
\f0 \
let someCharacter:Character = "e"\
switch someCharacter\
\{\
    case "a","e","i","o","u":\
        println("\\(someCharacter) is a vowel")\
    case "b","c","d","f","g","h","j","k","l","m","n","p","q","r","s","t","v","w","x","y","z":\
        println("\\(someCharacter) is a consonant")\
    default:\
    println("\\(someCharacter) is not a vowel or a consonant")\
\}\
/*\

\f1 \'d3\'eb
\f0 C
\f1 \'d3\'ef\'d1\'d4\'ba\'cd
\f0 objective-c
\f1 \'d6\'d0\'b5\'c4
\f0 switch
\f1 \'d3\'ef\'be\'e4\'b2\'bb\'cd\'ac\'a3\'ac\'d4\'da
\f0 Swift
\f1 \'d6\'d0\'a3\'ac\'b5\'b1\'c6\'a5\'c5\'e4\'b5\'c4
\f0 case
\f1 \'bf\'e9\'d6\'d0\'b5\'c4\'b4\'fa\'c2\'eb\'d6\'b4\'d0\'d0\'cd\'ea\'b1\'cf\'ba\'f3\'a3\'ac\'b3\'cc\'d0\'f2\'bb\'e1\'d6\'d5\'d6\'b9
\f0 switch
\f1 \'d3\'ef\'be\'e4\'a3\'ac\'b6\'f8\'b2\'bb\'bb\'e1\'bc\'cc\'d0\'f8\'d6\'b4\'d0\'d0\'cf\'c2\'d2\'bb\'b8\'f6
\f0 case
\f1 \'bf\'e9\'a1\'a3\'d5\'e2\'d2\'b2\'be\'cd\'ca\'c7\'cb\'b5\'a3\'ac\'b2\'bb\'d0\'e8\'d2\'aa\'d4\'da
\f0 case
\f1 \'bf\'e9\'d6\'d0\'cf\'d4\'ca\'bd\'b5\'c4\'ca\'b9\'d3\'c3
\f0 break
\f1 \'d3\'ef\'be\'e4\'a1\'a3\'d5\'e2\'ca\'b9\'b5\'c3
\f0 switch
\f1 \'d3\'ef\'be\'e4\'b8\'fc\'bc\'d3\'b0\'b2\'c8\'ab\'a3\'ac\'b8\'fc\'d2\'d7\'d3\'c3\'a3\'ac\'d2\'b2\'b1\'dc\'c3\'e2\'c1\'cb\'d2\'f2\'cd\'fc\'bc\'c7\'d0\'b4
\f0 break
\f1 \'d3\'ef\'be\'e4\'b6\'f8\'b2\'fa\'c9\'fa\'b4\'ed\'ce\'f3
\f0 \
*/\
\
\
//
\f1 \'d4\'aa\'d7\'e9
\f0 \
let somePoint = (1,1)\
switch somePoint\
\{\
    case (0,0):\
       println("(0,0) is at the origin")\
    case (_,0):\
       println("(\\(somePoint.0),0) is on the x-axis")\
    case (0,_):\
       println("(0,\\(somePoint.1)) is on the y-axis")\
    case (-2...2,-2...2): //
\f1 \'b1\'ed\'ca\'be\'b7\'b6\'ce\'a7
\f0 \
       println("(\\(somePoint.0),\\(somePoint.1)) is inside the box")\
    default:\
       println("(\\(somePoint.0),\\(somePoint.1)) is outside of the box")\
\}\
\
//
\f1 \'d6\'b5\'b0\'f3\'b6\'a8
\f0 (Value Bindings)\
let anotherPoint = (2,0)\
switch anotherPoint\
\{\
    case (let x,0):\
       println("on the x-axis with an x value of \\(x)")\
    case (0,let y):\
       println("on the y-axis with an y value of \\(y)")\
    case let(x,y):\
       println("somewhere else at (\\(x),\\(y))")\
\}\
/*\

\f1 \'d7\'a2\'d2\'e2\'a3\'ba\'d5\'e2\'b8\'f6
\f0 switch
\f1 \'d3\'ef\'be\'e4\'b2\'bb\'b0\'fc\'ba\'ac\'c4\'ac\'c8\'cf\'bf\'e9\'a1\'a3\'d5\'e2\'ca\'c7\'d2\'f2\'ce\'aa\'d7\'ee\'ba\'f3\'d2\'bb\'b8\'f6
\f0 case--case let(x,y)
\f1 \'c9\'f9\'c3\'f7\'c1\'cb\'d2\'bb\'b8\'f6\'bf\'c9\'d2\'d4\'c6\'a5\'c5\'e4\'d3\'e0\'cf\'c2\'cb\'f9\'d3\'d0\'d6\'b5\'b5\'c4\'d4\'aa\'d7\'e9\'a1\'a3\'d5\'e2\'ca\'b9\'b5\'c3
\f0 switch
\f1 \'d3\'ef\'be\'e4\'d2\'d1\'be\'ad\'cd\'ea\'b1\'b8\'c1\'cb\'a3\'ac\'d2\'f2\'b4\'cb\'b2\'bb\'d0\'e8\'d2\'aa\'ca\'e9\'d0\'b4\'c4\'ac\'c8\'cf\'bf\'e9
\f0 \
*/\
\
//Case
\f1 \'bf\'e9\'b5\'c4\'c4\'a3\'ca\'bd\'bf\'c9\'d2\'d4\'ca\'b9\'d3\'c3
\f0 where
\f1 \'d3\'ef\'be\'e4\'c0\'b4\'c5\'d0\'b6\'cf\'b6\'ee\'cd\'e2\'b5\'c4\'cc\'f5\'bc\'fe
\f0 \
let yetAnotherPoint = (1,-1)\
switch yetAnotherPoint\
\{\
    case let(x,y) where x == y:\
        println("(\\(x),\\(y)) is on the line x == y")\
    case let(x,y) where x == -y:\
        println("(\\(x),\\(y)) is on the line x == -y")\
    case let(x,y):\
        println("(\\(x),\\(y)) is just some arbitrary point")\
\
\}\
\
//
\f1 \'bf\'d8\'d6\'c6\'d7\'aa\'d2\'c6\'d3\'ef\'be\'e4
\f0  continue
\f1 \'a3\'ac
\f0 break
\f1 \'a3\'ac
\f0 fallthrough
\f1 \'a3\'ac
\f0 return\
  //continue
\f1 \'b8\'e6\'cb\'df\'d2\'bb\'b8\'f6\'d1\'ad\'bb\'b7\'cc\'e5\'c1\'a2\'bf\'cc\'cd\'a3\'d6\'b9\'b1\'be\'b4\'ce\'d1\'ad\'bb\'b7\'b5\'fc\'b4\'fa\'a3\'ac\'d6\'d8\'d0\'c2\'bf\'aa\'ca\'bc\'cf\'c2\'b4\'ce\'d1\'ad\'bb\'b7\'b5\'fc\'b4\'fa
\f0 \
  //break
\f1 \'d3\'ef\'be\'e4\'bb\'e1\'c1\'a2\'bf\'cc\'bd\'e1\'ca\'f8\'d5\'e6\'b8\'f6\'bf\'d8\'d6\'c6\'c1\'f7\'b5\'c4\'d6\'b4\'d0\'d0
\f0 \
  //fallthrough 
\f1 \'d6\'b4\'d0\'d0\'cf\'c2\'b8\'f6
\f0 case
\f1 \'d3\'ef\'be\'e4\'b5\'c4\'c4\'da\'c8\'dd
\f0 \
\
//
\f1 \'b1\'ea\'c7\'a9\'cc\'f5\'bc\'fe
\f0 (Labeled Statements)\
\
\
}