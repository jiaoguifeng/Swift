{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset134 STHeitiSC-Light;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww22620\viewh18160\viewkind0
\deftab866
\pard\tx866\pardeftab866\pardirnatural

\f0\fs36 \cf0 \CocoaLigature0 2.11 
\f1 \'b7\'bd\'b7\'a8\'d1\'a7\'cf\'b0\'b1\'ca\'bc\'c7
\f0 \
\
import Foundation\
\
/* 
\f1 \'b7\'bd\'b7\'a8
\f0  */\
/*\

\f1 \'b7\'bd\'b7\'a8\'ca\'c7\'ba\'cd\'c4\'b3\'d0\'a9\'cc\'d8\'b6\'a8\'c0\'e0\'d0\'cd\'cf\'e0\'b9\'d8\'c1\'aa\'b5\'c4\'ba\'af\'ca\'fd\'a1\'a3\'c0\'e0\'a1\'a2\'bd\'e1\'b9\'b9\'cc\'e5\'a1\'a2\'c3\'b6\'be\'d9\'b6\'bc\'bf\'c9\'d2\'d4\'b6\'a8\'d2\'e5\'ca\'b5\'c0\'fd\'b7\'bd\'b7\'a8\'a3\'bb\'ca\'b5\'c0\'fd\'b7\'bd\'b7\'a8\'ce\'aa\'b8\'f8\'b6\'a8\'c0\'e0\'d0\'cd\'b5\'c4\'ca\'b5\'c0\'fd\'b7\'e2\'d7\'b0\'c1\'cb\'be\'df\'cc\'e5\'b5\'c4\'c8\'ce\'ce\'f1\'ba\'cd\'b9\'a6\'c4\'dc\'a1\'a3
\f0 \

\f1 \'c0\'e0\'a1\'a2\'bd\'e1\'b9\'b9\'cc\'e5\'a1\'a2\'c3\'b6\'be\'d9\'d2\'b2\'bf\'c9\'d2\'d4\'b6\'a8\'d2\'e5\'c0\'e0\'d0\'cd\'b7\'bd\'b7\'a8\'a3\'ac\'c0\'e0\'d0\'cd\'b7\'bd\'b7\'a8\'d3\'eb\'c0\'e0\'d0\'cd\'b1\'be\'c9\'ed\'cf\'e0\'b9\'d8\'c1\'aa\'a1\'a3\'c0\'e0\'d0\'cd\'b7\'bd\'b7\'a8\'d3\'eb
\f0 objective-c
\f1 \'d6\'d0\'b5\'c4\'c0\'e0\'b7\'bd\'b7\'a8
\f0 (class methods)
\f1 \'cf\'e0\'cb\'c6\'a1\'a3
\f0 \
\

\f1 \'bd\'e1\'b9\'b9\'cc\'e5\'ba\'cd\'c3\'b6\'be\'d9\'c4\'dc\'b9\'bb\'b6\'a8\'d2\'e5\'b7\'bd\'b7\'a8\'ca\'c7
\f0 Swift
\f1 \'d3\'eb
\f0 Objective-c
\f1 \'b5\'c4\'d6\'f7\'d2\'aa\'c7\'f8\'b1\'f0\'d6\'ae\'d2\'bb\'a1\'a3
\f0 \
*/\
\
//
\f1 \'ca\'b5\'c0\'fd\'b7\'bd\'b7\'a8
\f0 (Instance Methods)\
class Counter\
\{\
    var count = 0\
    func increment()\
    \{\
        count++\
    \}\
    \
    func incrementBy(amount: Int)\
    \{\
        count += amount\
    \}\
    \
    //after added\
    func incrementBy(amount: Int ,numberOfTimes: Int)\
    \{\
        count += amount * numberOfTimes\
    \}\
    \
    func reset()\
    \{\
        count = 0\
    \}\
\}\
\
let counter = Counter()\
counter.increment()\
println(counter.count)\
\
counter.incrementBy(5)\
println(counter.count)\
\
counter.incrementBy(5, numberOfTimes: 3)\
println(counter.count)\
\
counter.reset()\
println(counter.count)\
\
//
\f1 \'b7\'bd\'b7\'a8\'b5\'c4\'be\'d6\'b2\'bf\'b2\'ce\'ca\'fd\'c3\'fb\'b3\'c6\'ba\'cd\'cd\'e2\'b2\'bf\'b2\'ce\'ca\'fd\'c3\'fb\'b3\'c6
\f0 (Local and External Parameter Names for Methods)\
//
\f1 \'c8\'e7\'c9\'cf
\f0 \
\
//self
\f1 \'ca\'f4\'d0\'d4
\f0 (The self Property)\
/*\

\f1 \'c0\'e0\'d0\'cd\'b5\'c4\'c3\'bf\'d2\'bb\'b8\'f6\'ca\'b5\'c0\'fd\'b6\'bc\'d3\'d0\'d2\'bb\'b8\'f6\'d2\'fe\'ba\'ac\'ca\'f4\'d0\'d4\'bd\'d0\'d7\'f6
\f0 self
\f1 \'a3\'ac
\f0 self
\f1 \'cd\'ea\'c8\'ab\'b5\'c8\'cd\'ac\'d3\'da\'b8\'c3\'ca\'b5\'c0\'fd\'b1\'be\'c9\'ed
\f0 \
*/\
struct Point\
\{\
    var x = 0.0, y = 0.0\
    func isToTheRightOfX(x: Double) -> Bool\
    \{\
        return self.x > x    //
\f1 \'c8\'e7\'b9\'fb\'b2\'bb\'ca\'b9\'d3\'c3
\f0 self
\f1 \'c7\'b0\'d7\'ba\'a3\'ac
\f0 Swift
\f1 \'be\'cd\'c8\'cf\'ce\'aa\'c1\'bd\'b4\'ce\'ca\'b9\'d3\'c3\'b5\'c4
\f0 x
\f1 \'b6\'bc\'d6\'b8\'b5\'c4\'ca\'c7\'c3\'fb\'b3\'c6\'ce\'aa
\f0 x
\f1 \'b5\'c4\'ba\'af\'ca\'fd\'b2\'ce\'ca\'fd
\f0 \
    \}\
\}\
\
let somePoint = Point(x: 4.0, y: 5.0)\
if somePoint.isToTheRightOfX(1.0)\
\{\
    println("This point is to the right of the line where x == 1.0")\
\}\
\
//
\f1 \'d4\'da\'ca\'b5\'c0\'fd\'b7\'bd\'b7\'a8\'d6\'d0\'d0\'de\'b8\'c4\'d6\'b5\'c0\'e0\'d0\'cd
\f0 (Modifying Value Types from Within Instance Methods)\
\
/*\

\f1 \'bd\'e1\'b9\'b9\'cc\'e5\'ba\'cd\'c3\'b6\'be\'d9\'ca\'c7\'d6\'b5\'c0\'e0\'d0\'cd\'a1\'a3\'d2\'bb\'b0\'e3\'c7\'e9\'bf\'f6\'cf\'c2\'a3\'ac\'d6\'b5\'c0\'e0\'d0\'cd\'b5\'c4\'ca\'f4\'d0\'d4\'b2\'bb\'c4\'dc\'d4\'da\'cb\'fc\'b5\'c4\'ca\'b5\'c0\'fd\'b7\'bd\'b7\'a8\'d6\'d0\'d0\'de\'b8\'c4\'a1\'a3
\f0 \
\

\f1 \'b5\'ab\'ca\'c7\'a3\'ac\'c8\'e7\'b9\'fb\'c4\'e3\'c8\'b7\'ca\'b5\'d2\'aa\'d4\'da\'c4\'b3\'b8\'f6\'be\'df\'cc\'e5\'b5\'c4\'b7\'bd\'b7\'a8\'d6\'d0\'d0\'de\'b8\'c4\'bd\'e1\'b9\'b9\'cc\'e5\'bb\'f2\'d5\'df\'c3\'b6\'be\'d9\'b5\'c4\'ca\'f4\'d0\'d4\'a3\'ac\'c4\'e3\'bf\'c9\'d2\'d4\'d1\'a1\'d4\'f1\'b1\'e4\'d2\'ec
\f0 (mutating)
\f1 \'d5\'e2\'b8\'f6\'b7\'bd\'b7\'a8\'a3\'ac\'c8\'bb\'ba\'f3\'b7\'bd\'b7\'a8\'be\'cd\'bf\'c9\'d2\'d4\'b4\'d3\'c4\'da\'b2\'bf\'b8\'c4\'b1\'e4\'cb\'fc\'b5\'c4\'ca\'f4\'d0\'d4\'a3\'bb\'b2\'a2\'c7\'d2\'cb\'fc\'d7\'f6\'b5\'c4\'c8\'ce\'ba\'ce\'b8\'c4\'b1\'e4\'d4\'da\'b7\'bd\'b7\'a8\'bd\'e1\'ca\'f8\'ca\'b1\'bb\'b9\'bb\'e1\'b1\'a3\'c1\'f4\'d4\'da\'d4\'ad\'ca\'bc\'bd\'e1\'b9\'b9\'d6\'d0\'a1\'a3\'b7\'bd\'b7\'a8\'bb\'b9\'bf\'c9\'d2\'d4\'b8\'f8\'cb\'fc\'d2\'fe\'ba\'ac\'b5\'c4
\f0 self
\f1 \'ca\'f4\'d0\'d4\'b8\'b3\'d6\'b5\'d2\'bb\'b8\'f6\'c8\'ab\'d0\'c2\'b5\'c4\'ca\'b5\'c0\'fd\'a3\'ac\'d5\'e2\'b8\'f6\'d0\'c2\'ca\'b5\'c0\'fd\'d4\'da\'b7\'bd\'b7\'a8\'bd\'e1\'ca\'f8\'ba\'f3\'bd\'ab\'cc\'e6\'bb\'bb\'d4\'ad\'c0\'b4\'b5\'c4\'ca\'b5\'c0\'fd\'a1\'a3
\f0 \
*/\
\
struct OtherPoint\
\{\
    var x = 0.0, y = 0.0\
    mutating func moveByX(deltaX: Double, y deltaY: Double)  //
\f1 \'d5\'eb\'b6\'d4\'bd\'e1\'b9\'b9\'cc\'e5\'ba\'cd\'c3\'b6\'be\'d9
\f0 \
    \{\
//        x += deltaX\
//        y += deltaY\
        //
\f1 \'b5\'da\'d2\'bb\'d6\'d6\'b7\'bd\'b7\'a8
\f0 \
        \
        self = OtherPoint(x: x + deltaX, y: y + deltaY)\
        //
\f1 \'b5\'da\'b6\'fe\'d6\'d6\'b7\'bd\'b7\'a8
\f0 \
    \}\
\}\
var somesPoint = OtherPoint(x: 1.0, y: 1.0)  //let
\f1 \'c0\'e0\'d0\'cd\'b2\'bb\'c4\'dc\'d0\'de\'b8\'c4
\f0 \
somesPoint.moveByX(2.0, y: 3.0)\
println("The point is now at (\\(somesPoint.x), \\(somesPoint.y))")\
\
enum TriStateSwitch\
\{\
    case Off, Low, High\
    mutating func next()\
    \{\
        switch self\
        \{\
            case Off:\
                self = Low\
            case Low:\
                self = High\
            case High:\
                self = Off\
        \}\
    \}\
\}\
\
var ovenLight = TriStateSwitch.Low\
\
ovenLight.next()\
if ovenLight == TriStateSwitch.High\
\{\
    println(ovenLight)\
\}\
\
ovenLight.next()\
if ovenLight == TriStateSwitch.Off\
\{\
    println(ovenLight)\
\}\
\
//
\f1 \'c0\'e0\'d0\'cd\'b7\'bd\'b7\'a8
\f0 \
struct LevelTracker\
\{\
    static var highestUnlockedLevel = 1\
    static func unlockLevel(level: Int)  //
\f1 \'c0\'e0\'d0\'cd\'b7\'bd\'b7\'a8
\f0 \
    \{\
        if level > highestUnlockedLevel\
        \{\
            highestUnlockedLevel = level\
        \}\
    \}\
    \
    static func levelIsUnlocked(level: Int) -> Bool  //
\f1 \'c0\'e0\'d0\'cd\'b7\'bd\'b7\'a8
\f0 \
    \{\
        return level <= highestUnlockedLevel\
    \}\
    \
    var currentLevel = 1\
    mutating func advanceToLevel(level: Int) -> Bool  //
\f1 \'ca\'b5\'c0\'fd\'b7\'bd\'b7\'a8\'d6\'d0\'d0\'de\'b8\'c4\'d6\'b5\'c0\'e0\'d0\'cd
\f0 \
    \{\
        if LevelTracker.levelIsUnlocked(level)\
        \{\
            currentLevel = level\
            return true\
        \}\
        else\
        \{\
            return false\
        \}\
    \}\
\}\
\
class Player\
\{\
    var tracker = LevelTracker()\
    let playerName: String\
    func completedLevel(level: Int)\
    \{\
        LevelTracker.unlockLevel(level + 1)\
        tracker.advanceToLevel(level + 1)\
    \}\
    \
    init(name: String)\
    \{\
        playerName = name\
    \}\
\}\
\
var player = Player(name: "jiao")\
player.completedLevel(1)\
\
println("highest unlocked level is now \\(LevelTracker.highestUnlockedLevel)")\
\
\
player = Player(name: "gui")\
if player.tracker.advanceToLevel(6)\
\{\
    println("player is now on level 6")\
\}\
else\
\{\
    println("level 6 has not yet been unlocked")\
\}\
\
}