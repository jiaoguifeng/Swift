{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf140
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset134 STHeitiSC-Light;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww22620\viewh18160\viewkind0
\deftab866
\pard\tx866\pardeftab866\pardirnatural

\f0\fs36 \cf0 \CocoaLigature0 2.8 
\f1 \'c3\'b6\'be\'d9\'d1\'a7\'cf\'b0\'b1\'ca\'bc\'c7
\f0 \
\
import Foundation\
\
/* 
\f1 \'c3\'b6\'be\'d9
\f0  */\
/*\

\f1 \'c3\'b6\'be\'d9\'b6\'a8\'d2\'e5\'c1\'cb\'d2\'bb\'b8\'f6\'cd\'a8\'d3\'c3\'c0\'e0\'d0\'cd\'b5\'c4\'d2\'bb\'d7\'e9\'cf\'e0\'b9\'d8\'b5\'c4\'d6\'b5\'a3\'ac\'ca\'b9\'c4\'e3\'bf\'c9\'d2\'d4\'d4\'da\'c4\'e3\'b5\'c4\'b4\'fa\'c2\'eb\'d6\'d0\'d2\'d4\'d2\'bb\'b8\'f6\'b0\'b2\'c8\'ab\'b5\'c4\'b7\'bd\'ca\'bd\'c0\'b4\'ca\'b9\'d3\'c3\'d5\'e2\'d0\'a9\'d6\'b5\'a1\'a3\'c8\'e7\'b9\'fb\'c4\'e3\'ca\'ec\'cf\'a4
\f0 C
\f1 \'d3\'ef\'d1\'d4\'a3\'ac\'c4\'e3\'be\'cd\'bb\'e1\'d6\'aa\'b5\'c0\'a3\'ac\'d4\'da
\f0 C
\f1 \'d3\'ef\'d1\'d4\'d6\'d0\'c3\'b6\'be\'d9\'d6\'b8\'b6\'a8\'cf\'e0\'b9\'d8\'c3\'fb\'b3\'c6\'ce\'aa\'d2\'bb\'d7\'e9\'d5\'fb\'ca\'fd\'d6\'b5\'a1\'a3
\f0 Swift
\f1 \'d6\'d0\'b5\'c4\'c3\'b6\'be\'d9\'b8\'fc\'bc\'d3\'c1\'e9\'bb\'ee\'a3\'ac\'b2\'bb\'b1\'d8\'b8\'f8\'c3\'bf\'d2\'bb\'b8\'f6\'c3\'b6\'be\'d9\'b3\'c9\'d4\'b1
\f0 (enumeration member)
\f1 \'cc\'e1\'b9\'a9\'d2\'bb\'b8\'f6\'d6\'b5\'a1\'a3\'c8\'e7\'b9\'fb\'d2\'bb\'b8\'f6\'d6\'b5
\f0 (
\f1 \'b1\'bb\'c8\'cf\'ce\'aa\'ca\'c7\'d4\'ad\'ca\'bc\'d6\'b5
\f0 )
\f1 \'b1\'bb\'cc\'e1\'b9\'a9\'b8\'f8\'c3\'bf\'d2\'bb\'b8\'f6\'c3\'b6\'be\'d9\'b3\'c9\'d4\'b1\'a3\'ac\'d4\'f2\'b8\'c3\'d6\'b5\'bf\'c9\'d2\'d4\'ca\'c7\'d2\'bb\'b8\'f6\'d7\'d6\'b7\'fb\'b4\'ae\'a3\'ac\'d2\'bb\'b8\'f6\'d7\'d6\'b7\'fb\'a3\'ac\'bb\'f2\'d5\'df\'d2\'bb\'b8\'f6\'d5\'fb\'ca\'fd\'d6\'b5\'bb\'f2\'b8\'a1\'b5\'e3\'d6\'b5
\f0 \

\f1 \'b4\'cb\'cd\'e2\'a3\'ac\'c3\'b6\'be\'d9\'b3\'c9\'d4\'b1\'bf\'c9\'d2\'d4\'d6\'b8\'b6\'a8\'c8\'ce\'d2\'e2\'c0\'e0\'d0\'cd\'b5\'c4\'b9\'d8\'c1\'aa\'d6\'b5\'b4\'e6\'b4\'a2\'b5\'bd\'c3\'b6\'be\'d9\'b3\'c9\'d4\'b1\'d6\'b5\'d6\'d0\'a3\'ac\'be\'cd\'cf\'f1\'c6\'e4\'cb\'fb\'d3\'ef\'d1\'d4\'d6\'d0\'b5\'c4\'c1\'aa\'ba\'cf\'cc\'e5
\f0 (union)
\f1 \'ba\'cd\'b1\'e4\'cc\'e5
\f0 (variants)
\f1 \'a1\'a3\'c4\'e3\'bf\'c9\'d2\'d4\'b6\'a8\'d2\'e5\'d2\'bb\'d7\'e9\'cd\'a8\'d3\'c3\'b5\'c4\'cf\'e0\'b9\'d8\'b3\'c9\'d4\'b1\'d7\'f7\'ce\'aa\'c3\'b6\'be\'d9\'b5\'c4\'d2\'bb\'b2\'bf\'b7\'d6\'a3\'ac\'c3\'bf\'d2\'bb\'d7\'e9\'b6\'bc\'d3\'d0\'b2\'bb\'cd\'ac\'b5\'c4\'d2\'bb\'d7\'e9\'d3\'eb\'cb\'fc\'cf\'e0\'b9\'d8\'b5\'c4\'ca\'ca\'b5\'b1\'c0\'e0\'d0\'cd\'b5\'c4\'ca\'fd\'d6\'b5\'a1\'a3
\f0 \
*/\
\
enum CompassPoint\
\{\
    case North\
    case South\
    case East\
    case West\
\}\
\
var directionToHead = CompassPoint.West //
\f1 \'cd\'c6\'b6\'cf\'ce\'aa
\f0 CompassPoint
\f1 \'c0\'e0\'d0\'cd
\f0 \
directionToHead = .East //
\f1 \'d2\'bb\'b5\'a9\'b1\'bb\'c9\'f9\'c3\'f7\'ce\'aa
\f0 CompassPoint
\f1 \'c0\'e0\'d0\'cd\'a3\'ac\'c4\'e3\'bf\'c9\'d2\'d4\'ca\'b9\'d3\'c3\'b8\'fc\'b6\'cc\'b5\'c4\'b5\'e3
\f0 (.)
\f1 \'d3\'ef\'b7\'a8\'bd\'ab\'c6\'e4\'c9\'e8\'d6\'c3\'ce\'aa\'c1\'ed\'d2\'bb\'b8\'f6
\f0 CompassPoint
\f1 \'b5\'c4\'d6\'b5
\f0 \
\
//
\f1 \'c6\'a5\'c5\'e4\'c3\'b6\'be\'d9\'d6\'b5\'ba\'cd
\f0 Switch
\f1 \'d3\'ef\'be\'e4
\f0 \
directionToHead = .South\
switch directionToHead\
\{\
case .North:\
    println("Lots of planets have a north")\
case .South:\
    println("Watch out for penguins")\
case .East:\
    println("Where the sun rises")\
case .West:\
    println("Where the skies are blue")\
\}\
\
//
\f1 \'b9\'d8\'c1\'aa\'d6\'b5
\f0 \
enum Barcode\
\{\
    case UPCA(Int,Int,Int)\
    case QRCode(String)\
\}\
\
var productBarcode = Barcode.UPCA(8, 85909_51226, 3)\
productBarcode = .QRCode("ABCDEFGHIJKLMNOP")\
\
/*\

\f1 \'d4\'ad\'ca\'bc\'b5\'c4
\f0 Barcode
\f1 \'a1\'a3
\f0 UPCA
\f1 \'ba\'cd\'c6\'e4\'d5\'fb\'ca\'fd\'d6\'b5\'b1\'bb\'d0\'c2\'b5\'c4
\f0 Barcode.QRCode
\f1 \'ba\'cd\'c6\'e4\'d7\'d6\'b7\'fb\'b4\'ae\'d6\'b5\'cb\'f9\'b4\'fa\'cc\'e6\'a1\'a3\'cc\'f5\'d0\'ce\'c2\'eb\'b5\'c4\'b3\'a3\'c1\'bf\'ba\'cd\'b1\'e4\'c1\'bf\'bf\'c9\'d2\'d4\'b4\'e6\'b4\'a2
\f0 .UPCA
\f1 \'bb\'f2\'d5\'df
\f0 .QRCode(
\f1 \'c1\'ac\'cd\'ac\'cb\'fc\'b5\'c4\'b9\'d8\'c1\'aa\'d6\'b5
\f0 )
\f1 \'a3\'ac\'b5\'ab\'ca\'c7\'d4\'da\'c8\'ce\'ba\'ce\'d6\'b8\'b6\'a8\'ca\'b1\'bc\'e4\'d6\'bb\'c4\'dc\'b4\'e6\'b4\'a2\'c6\'e4\'d6\'d0\'d6\'ae\'d2\'bb\'a1\'a3
\f0 \
*/\
\
switch productBarcode\
\{\
case .UPCA(let numberSystem,let identifier,let check):\
    println("UPCA with value of \\(numberSystem),\\(identifier),\\(check)")\
case .QRCode(let productCode):\
    println("QR Code with value of \\(productCode)")\
\}\
\
enum Planet : Int\
\{\
    case Mercury = 1,Venus,Earth,Mars,Jupiter,Saturn,Uranus,Neptune\
\}\
\
let earthOrder = Planet.Earth.rawValue\
println(earthOrder)\
\
let somePlanet = Planet(rawValue: 3)\
println(somePlanet)\
\
\
\
\
}