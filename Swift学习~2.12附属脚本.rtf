{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset134 STHeitiSC-Light;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww22620\viewh18160\viewkind0
\deftab866
\pard\tx866\pardeftab866\pardirnatural

\f0\fs36 \cf0 \CocoaLigature0 2.12 
\f1 \'b8\'bd\'ca\'f4\'bd\'c5\'b1\'be\'d1\'a7\'cf\'b0\'b1\'ca\'bc\'c7
\f0 \
\
import Foundation\
\
/* 
\f1 \'b8\'bd\'ca\'f4\'bd\'c5\'b1\'be
\f0  */\
/* 
\f1 \'b8\'bd\'ca\'f4\'bd\'c5\'b1\'be\'bf\'c9\'d2\'d4\'b6\'a8\'d2\'e5\'d4\'da\'c0\'e0
\f0 (class)
\f1 \'a1\'a2\'bd\'e1\'b9\'b9\'cc\'e5
\f0 (structure)
\f1 \'ba\'cd\'c3\'b6\'be\'d9
\f0 (enumeration)
\f1 \'d5\'e2\'d0\'a9\'c4\'bf\'b1\'ea\'d6\'d0\'a3\'ac\'bf\'c9\'d2\'d4\'c8\'cf\'ce\'aa\'ca\'c7\'b7\'c3\'ce\'ca\'b6\'d4\'cf\'f3\'a1\'a2\'bc\'af\'ba\'cf\'bb\'f2\'d0\'f2\'c1\'d0\'b5\'c4\'bf\'ec\'bd\'dd\'b7\'bd\'ca\'bd\'a3\'ac\'b2\'bb\'d0\'e8\'d2\'aa\'d4\'da\'b5\'f7\'d3\'c3\'ca\'b5\'c0\'fd\'b5\'c4\'cc\'d8\'b6\'a8\'b5\'c4\'b8\'b3\'d6\'b5\'ba\'cd\'b7\'c3\'ce\'ca\'b7\'bd\'b7\'a8\'a1\'a3
\f0 */\
\
//
\f1 \'b8\'bd\'ca\'f4\'bd\'c5\'b1\'be\'d3\'ef\'b7\'a8
\f0 \
/* 
\f1 \'b8\'bd\'ca\'f4\'bd\'c5\'b1\'be\'d4\'ca\'d0\'ed\'c4\'e3\'cd\'a8\'b9\'fd\'d4\'da\'ca\'b5\'c0\'fd\'ba\'f3\'c3\'e6\'b5\'c4\'b7\'bd\'c0\'a8\'ba\'c5\'d6\'d0\'b4\'ab\'c8\'eb\'d2\'bb\'b8\'f6\'bb\'f2\'d5\'df\'b6\'e0\'b8\'f6\'b5\'c4\'cb\'f7\'d2\'fd\'d6\'b5\'c0\'b4\'b6\'d4\'ca\'b5\'c0\'fd\'bd\'f8\'d0\'d0\'b7\'c3\'ce\'ca\'ba\'cd\'b8\'b3\'d6\'b5\'a1\'a3\'d3\'ef\'b7\'a8\'c0\'e0\'cb\'c6\'d3\'da\'ca\'b5\'c0\'fd\'b7\'bd\'b7\'a8\'ba\'cd\'bc\'c6\'cb\'e3\'d0\'cd\'ca\'f4\'d0\'d4\'b5\'c4\'bb\'ec\'ba\'cf
\f0 */\
\
struct TimesTable\
\{\
    let multiplier: Int\
    subscript(index: Int) -> Int\
    \{\
        return multiplier * index\
    \}\
\}\
\
let threeTimesTable = TimesTable(multiplier: 3)   //
\f1 \'b3\'f5\'ca\'bc\'bb\'af
\f0 \
println("3
\f1 \'b5\'c4
\f0 6
\f1 \'b1\'b6\'ca\'c7
\f0 \\(threeTimesTable[6])")  //threeTimesTable[6] 
\f1 \'b5\'f7\'d3\'c3\'bd\'c5\'b1\'be
\f0  subscript(index: Int) -> Int\
\
//
\f1 \'b8\'bd\'ca\'f4\'bd\'c5\'b1\'be\'d3\'c3\'b7\'a8
\f0 \
var numberOfLegs = ["spider" : 8, "ant" : 6, "cat" : 4]\
numberOfLegs["bird"] = 2\
/* Swift
\f1 \'d6\'d0\'d7\'d6\'b5\'e4\'b5\'c4\'b8\'bd\'ca\'f4\'bd\'c5\'b1\'be\'ca\'b5\'cf\'d6\'d6\'d0\'a3\'ac\'d4\'da
\f0 get
\f1 \'b2\'bf\'b7\'d6\'b7\'b5\'bb\'d8\'d6\'b5\'ca\'c7
\f0 Int?,
\f1 \'c9\'cf\'c0\'fd\'d6\'d0\'b5\'c4
\f0 numberOfLegs
\f1 \'d7\'d6\'b5\'e4\'cd\'a8\'b9\'fd\'cf\'c2\'b1\'df\'b7\'b5\'bb\'d8\'b5\'c4\'ca\'c7\'d2\'bb\'b8\'f6
\f0 Int?
\f1 \'bb\'f2\'d5\'df\'cb\'b5
\f0 \'93
\f1 \'bf\'c9\'d1\'a1\'b5\'c4
\f0 Int\'94
\f1 \'a3\'ac\'b2\'bb\'ca\'c7\'c3\'bf\'b8\'f6\'d7\'d6\'b5\'e4\'b5\'c4\'cb\'f7\'d2\'fd\'b6\'bc\'c4\'dc\'b5\'c3\'b5\'bd\'d2\'bb\'b8\'f6\'d5\'fb\'ca\'fd\'d6\'b5\'a3\'ac\'b6\'d4\'d3\'da\'c3\'bb\'d3\'d0\'c9\'e8\'b9\'fd\'d6\'b5\'b5\'c4\'b7\'c3\'ce\'ca\'b7\'b5\'bb\'d8\'b5\'c4\'bd\'e1\'b9\'fb\'be\'cd\'ca\'c7
\f0 nil
\f1 \'a3\'ac\'cd\'ac\'d1\'f9\'cf\'eb\'d2\'aa\'b4\'d3\'d7\'d6\'b5\'e4\'ca\'b5\'c0\'fd\'d6\'d0\'c9\'be\'b3\'fd\'c4\'b3\'b8\'f6\'cb\'f7\'d2\'fd\'cf\'c2\'b5\'c4\'d6\'b5\'d2\'b2\'d6\'bb\'d0\'e8\'d2\'aa\'b8\'f8\'d5\'e2\'b8\'f6\'cb\'f7\'d2\'fd\'b8\'b3\'d6\'b5\'ce\'aa
\f0 nil
\f1 \'bc\'b4\'bf\'c9
\f0 */\
\
//
\f1 \'b8\'bd\'ca\'f4\'bd\'c5\'b1\'be\'d1\'a1\'cf\'ee
\f0 \
struct Matrix\
\{\
    let rows: Int,columns:Int\
    var grid: [Double]\
    init(rows: Int,columns: Int)\
    \{\
        self.rows = rows\
        self.columns = columns\
        grid = Array(count: rows * columns,repeatedValue: 0.0)\
    \}\
    \
    func indexIsValidForRow(row: Int, column: Int) -> Bool\
    \{\
        return row >= 0 &&  row < rows && column >= 0 && column < columns\
    \}\
    \
    subscript(row: Int,column: Int) -> Double\
    \{\
        get\{\
            assert(indexIsValidForRow(row, column: column), "Index out of range")\
            return grid[(row * columns) + column]\
        \}\
        \
        set\{\
            assert(indexIsValidForRow(row, column: column), "Index out of range")\
            grid[(row * columns) + column] = newValue\
        \}\
    \}\
\}\
\
}