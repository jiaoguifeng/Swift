{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset134 STHeitiSC-Light;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww22620\viewh18160\viewkind0
\deftab866
\pard\tx866\pardeftab866\pardirnatural

\f0\fs36 \cf0 \CocoaLigature0 2.10 
\f1 \'ca\'f4\'d0\'d4\'d1\'a7\'cf\'b0\'b1\'ca\'bc\'c7
\f0 \
\
import Foundation\
\
/* 
\f1 \'ca\'f4\'d0\'d4
\f0  */\
/*\

\f1 \'ca\'f4\'d0\'d4\'bd\'ab\'d6\'b5\'ba\'cd\'cc\'d8\'b6\'a8\'b5\'c4\'c0\'e0\'a3\'ac\'bd\'e1\'b9\'b9\'cc\'e5\'bb\'f2\'c3\'b6\'be\'d9\'b9\'d8\'c1\'aa\'a1\'a3
\f0 \

\f1 \'b4\'e6\'b4\'a2\'ca\'f4\'d0\'d4\'b4\'e6\'b4\'a2\'b3\'a3\'c1\'bf\'bb\'f2\'d5\'df\'b1\'e4\'c1\'bf\'d7\'f7\'ce\'aa\'ca\'b5\'c0\'fd\'b5\'c4\'d2\'bb\'b2\'bf\'b7\'d6
\f0 \

\f1 \'bc\'c6\'cb\'e3\'ca\'f4\'d0\'d4\'bc\'c6\'cb\'e3
\f0 (
\f1 \'b6\'f8\'b2\'bb\'ca\'c7\'b4\'e6\'b4\'a2
\f0 )
\f1 \'d2\'bb\'b8\'f6\'d6\'b5\'a1\'a3
\f0 \

\f1 \'bc\'c6\'cb\'e3\'ca\'f4\'d0\'d4\'bf\'c9\'d2\'d4\'d3\'c3\'d3\'da\'c0\'e0\'a3\'ac\'bd\'e1\'b9\'b9\'cc\'e5\'ba\'cd\'c3\'b6\'be\'d9\'a3\'ac\'b4\'e6\'b4\'a2\'ca\'f4\'d0\'d4\'d6\'bb\'c4\'dc\'d3\'c3\'d3\'da\'c0\'e0\'ba\'cd\'bd\'e1\'b9\'b9\'cc\'e5\'a1\'a3
\f0 \
*/\
\
struct FixedLengthRange\
\{\
    var firstValue: Int\
    let length: Int\
\}\
\
var rangeOfThreeItems = FixedLengthRange(firstValue: 0, length: 3)\
rangeOfThreeItems.firstValue = 6\
\
let rangeOfFourItems = FixedLengthRange(firstValue: 0, length: 4)\
//rangeOfFourItems.firstValue = 6   //
\f1 \'d5\'e2\'c0\'ef\'b8\'b3\'d6\'b5\'bb\'e1\'b1\'a8\'b4\'ed
\f0 \
/*\

\f1 \'d5\'e2\'d6\'d6\'d0\'d0\'ce\'aa\'ca\'c7\'d3\'c9\'d3\'da\'bd\'e1\'b9\'b9\'cc\'e5
\f0 (struct)
\f1 \'ca\'f4\'d3\'da\'d6\'b5\'c0\'e0\'d0\'cd\'a1\'a3\'b5\'b1\'d6\'b5\'c0\'e0\'d0\'cd\'b5\'c4\'ca\'b5\'c0\'fd\'b1\'bb\'c9\'f9\'c3\'f7\'ce\'aa\'b3\'a3\'c1\'bf\'b5\'c4\'ca\'b1\'ba\'f2\'a3\'ac\'cb\'fb\'b5\'c4\'cb\'f9\'d3\'d0\'ca\'f4\'d0\'d4\'d2\'b2\'be\'cd\'b3\'c9\'c1\'cb\'b3\'a3\'c1\'bf
\f0 \

\f1 \'ca\'f4\'d3\'da\'d2\'fd\'d3\'c3\'c0\'e0\'d0\'cd\'b5\'c4\'c0\'e0
\f0 (class)
\f1 \'d4\'f2\'b2\'bb\'d2\'bb\'d1\'f9\'a3\'ac\'b0\'d1\'d2\'bb\'b8\'f6\'d2\'fd\'d3\'c3\'c0\'e0\'d0\'cd\'b5\'c4\'ca\'b5\'c0\'fd\'b8\'b3\'b8\'f8\'d2\'bb\'b8\'f6\'b3\'a3\'c1\'bf\'ba\'f3\'a3\'ac\'c8\'d4\'c8\'bb\'bf\'c9\'d2\'d4\'d0\'de\'b8\'c4\'ca\'b5\'c0\'fd\'b5\'c4\'b1\'e4\'c1\'bf\'ca\'f4\'d0\'d4\'a1\'a3
\f0 \
*/\
\
//
\f1 \'d1\'d3\'b3\'d9\'b4\'a2\'b4\'e6\'ca\'f4\'d0\'d4
\f0 \
/*\

\f1 \'d1\'d3\'b3\'d9\'b4\'a2\'b4\'e6\'ca\'f4\'d0\'d4\'ca\'c7\'d6\'b8\'b5\'b1\'b5\'da\'d2\'bb\'b4\'ce\'b1\'bb\'b5\'f7\'d3\'c3\'b5\'c4\'ca\'b1\'ba\'f2\'b2\'c5\'bb\'e1\'bc\'c6\'cb\'e3\'c6\'e4\'b3\'f5\'ca\'bc\'d6\'b5\'b5\'c4\'ca\'f4\'d0\'d4\'a1\'a3\'d4\'da\'ca\'f4\'d0\'d4\'c9\'f9\'c3\'f7\'c7\'b0\'ca\'b9\'d3\'c3
\f0 lazy
\f1 \'c0\'b4\'b1\'ed\'ca\'be\'d2\'bb\'b8\'f6\'d1\'d3\'b3\'d9\'b4\'a2\'b4\'e6\'ca\'f4\'d0\'d4\'a1\'a3
\f0 \

\f1 \'d7\'a2\'d2\'e2\'a3\'ba\'b1\'d8\'d0\'eb\'bd\'ab\'d1\'d3\'b3\'d9\'b4\'e6\'b4\'a2\'ca\'f4\'d0\'d4\'c9\'f9\'c3\'f7\'b3\'c9\'b1\'e4\'c1\'bf
\f0 (var),
\f1 \'d2\'f2\'ce\'aa\'ca\'f4\'d0\'d4\'b5\'c4\'d6\'b5\'d4\'da\'ca\'b5\'c0\'fd\'b9\'b9\'d4\'ec\'cd\'ea\'b3\'c9\'d6\'ae\'c7\'b0\'bf\'c9\'c4\'dc\'ce\'de\'b7\'a8\'b5\'c3\'b5\'bd\'a1\'a3\'b6\'f8\'b3\'a3\'c1\'bf\'ca\'f4\'d0\'d4\'d4\'da\'b9\'b9\'d4\'ec\'b9\'fd\'b3\'cc\'cd\'ea\'b3\'c9\'d6\'ae\'c7\'b0\'b1\'d8\'d0\'eb\'d2\'aa\'d3\'d0\'b3\'f5\'ca\'bc\'d6\'b5\'a3\'ac\'d2\'f2\'b4\'cb\'ce\'de\'b7\'a8\'c9\'f9\'c3\'f7\'b3\'c9\'d1\'d3\'b3\'d9\'ca\'f4\'d0\'d4\'a1\'a3
\f0 \

\f1 \'d1\'d3\'b3\'d9\'ca\'f4\'d0\'d4\'ba\'dc\'d3\'d0\'d3\'c3\'a3\'ac\'b5\'b1\'ca\'f4\'d0\'d4\'b5\'c4\'d6\'b5\'d2\'c0\'c0\'b5\'d3\'da\'d4\'da\'ca\'b5\'c0\'fd\'b5\'c4\'b9\'b9\'d4\'ec\'b9\'fd\'b3\'cc\'bd\'e1\'ca\'f8\'c7\'b0\'ce\'de\'b7\'a8\'d6\'aa\'b5\'c0\'be\'df\'cc\'e5\'d6\'b5\'b5\'c4\'cd\'e2\'b2\'bf\'d2\'f2\'cb\'d8\'ca\'b1\'a3\'ac\'bb\'f2\'d5\'df\'b5\'b1\'ca\'f4\'d0\'d4\'b5\'c4\'d6\'b5\'d0\'e8\'d2\'aa\'b8\'b4\'d4\'d3\'bb\'f2\'d5\'df\'b4\'f3\'c1\'bf\'bc\'c6\'cb\'e3\'ca\'b1\'a3\'ac\'bf\'c9\'d2\'d4\'d6\'bb\'d4\'da\'d0\'e8\'d2\'aa\'b5\'c4\'ca\'b1\'ba\'f2\'c0\'b4\'bc\'c6\'cb\'e3\'cb\'fc\'a1\'a3
\f0 \
*/\
class DataImporter\
\{\
    var fileName = "data.txt"\
\}\
\
class DataManager\
\{\
    lazy var importer = DataImporter()\
    var data = [String]()\
\}\
\
let manager = DataManager()\
manager.data.append("Some data")\
manager.data.append("Some more data")\
\
println(manager.importer.fileName) //
\f1 \'d3\'c9\'d3\'da\'ca\'b9\'d3\'c3\'c1\'cb
\f0 lazy,importer
\f1 \'ca\'f4\'d0\'d4\'d6\'bb\'d3\'d0\'d4\'da\'b5\'da\'d2\'bb\'b4\'ce\'b1\'bb\'b7\'c3\'ce\'ca\'b5\'c4\'ca\'b1\'ba\'f2\'b2\'c5\'b1\'bb\'b4\'b4\'bd\'a8\'a1\'a3
\f0 \
\
//
\f1 \'bc\'c6\'cb\'e3\'ca\'f4\'d0\'d4
\f0 \
   //
\f1 \'b3\'fd\'b4\'e6\'b4\'a2\'ca\'f4\'d0\'d4\'cd\'e2\'a3\'ac\'c0\'e0\'a3\'ac\'bd\'e1\'b9\'b9\'cc\'e5\'ba\'cd\'c3\'b6\'be\'d9\'bf\'c9\'d2\'d4\'b6\'a8\'d2\'e5\'bc\'c6\'cb\'e3\'ca\'f4\'d0\'d4\'a3\'ac\'bc\'c6\'cb\'e3\'ca\'f4\'d0\'d4\'b2\'bb\'d6\'b1\'bd\'d3\'b4\'e6\'b4\'a2\'d6\'b5\'a3\'ac\'b6\'f8\'ca\'c7\'cc\'e1\'b9\'a9\'d2\'bb\'b8\'f6
\f0 getter
\f1 \'c0\'b4\'bb\'f1\'c8\'a1\'d6\'b5\'a3\'ac\'d2\'bb\'b8\'f6\'bf\'c9\'d1\'a1\'b5\'c4
\f0 setter
\f1 \'c0\'b4\'bc\'e4\'bd\'d3\'c9\'e8\'d6\'c3\'c6\'e4\'cb\'fb\'ca\'f4\'d0\'d4\'bb\'f2\'b1\'e4\'c1\'bf\'b5\'c4\'d6\'b5
\f0 \
struct Point\
\{\
    var x = 0.0,y = 0.0\
\}\
\
struct Size\
\{\
    var width = 0.0,height = 0.0\
\}\
\
struct Rect\
\{\
    var origin = Point()\
    var size = Size()\
    var center: Point\{\
    \
        get \{\
            let centerX = origin.x + (size.width / 2)\
            let centerY = origin.y + (size.height / 2)\
            return Point(x: centerX, y: centerY)\
        \}\
        \
        set(newCenter)\{\
            origin.x = newCenter.x - (size.width / 2)\
            origin.y = newCenter.y - (size.height / 2)\
        \}\
    \}\
\}\
\
var square = Rect(origin: Point(x: 0.0, y: 0.0), size: Size(width: 10.0,height: 10.0))\
let initialSquareCenter = square.center\
square.center = Point(x: 15.0, y: 15.0)\
println("Square.origin is now at (\\(square.origin.x),\\(square.origin.y))")\
\
//
\f1 \'b1\'e3\'bd\'dd
\f0 setter
\f1 \'c9\'f9\'c3\'f7
\f0 \
struct AlternativeRect\
\{\
    var origin = Point()\
    var size = Size()\
    var center: Point\{\
        \
        get \{\
            let centerX = origin.x + (size.width / 2)\
            let centerY = origin.y + (size.height / 2)\
            return Point(x: centerX, y: centerY)\
        \}\
\
        set\{\
            origin.x = newValue.x - (size.width / 2)   //newValue
\f1 \'ca\'f4\'d3\'da\'c4\'ac\'c8\'cf\'c3\'fb\'b3\'c6\'a3\'ac\'cf\'b8\'bd\'da\'ce\'ca\'cc\'e2\'a3\'ac\'d6\'b5\'b5\'c3\'c1\'f4\'d2\'e2
\f0 \
            origin.y = newValue.y - (size.height / 2)\
        \}\
\
    \}\
\}\
\
//
\f1 \'d6\'bb\'b6\'c1\'bc\'c6\'cb\'e3\'ca\'f4\'d0\'d4
\f0 \
/*\

\f1 \'d7\'a2\'d2\'e2\'a3\'ba\'b1\'d8\'d0\'eb\'ca\'b9\'d3\'c3
\f0 var
\f1 \'b9\'d8\'bc\'fc\'d7\'d6\'b6\'a8\'d2\'e5\'bc\'c6\'cb\'e3\'ca\'f4\'d0\'d4\'a3\'ac\'b0\'fc\'c0\'a8\'d6\'bb\'b6\'c1\'bc\'c6\'cb\'e3\'ca\'f4\'d0\'d4\'a3\'ac\'d2\'f2\'ce\'aa\'cb\'fb\'c3\'c7\'b5\'c4\'d6\'b5\'ca\'c7\'b2\'bb\'b9\'cc\'b6\'a8\'b5\'c4\'a1\'a3
\f0 let
\f1 \'b9\'d8\'bc\'fc\'d7\'d6\'d6\'bb\'d3\'c3\'c0\'b4\'c9\'f9\'c3\'f7\'b3\'a3\'c1\'bf\'ca\'f4\'d0\'d4\'a3\'ac\'b1\'ed\'ca\'be\'b3\'f5\'ca\'bc\'bb\'af\'ba\'f3\'d4\'d9\'d2\'b2\'ce\'de\'b7\'a8\'d0\'de\'b8\'c4\'a1\'a3
\f0 \

\f1 \'d6\'bb\'b6\'c1\'bc\'c6\'cb\'e3\'ca\'f4\'d0\'d4\'b5\'c4\'c9\'f9\'c3\'f7\'bf\'c9\'d2\'d4\'c8\'a5\'b5\'f4
\f0 get
\f1 \'b9\'d8\'bc\'fc\'d7\'d6\'ba\'cd\'bb\'a8\'c0\'a8\'ba\'c5
\f0 \
*/\
struct Cuboid\
\{\
    var width = 0.0,height = 0.0,depth = 0.0\
    var volume: Double\{\
       return width * height * depth\
    \}\
\}\
\
let fourByFiveByTwo = Cuboid(width: 4.0, height: 5.0, depth: 2.0)\
println("the volume of fourByFiveByTwo is \\(fourByFiveByTwo.volume)")\
\
//
\f1 \'ca\'f4\'d0\'d4\'bc\'e0\'ca\'d3\'c6\'f7
\f0 \
/*\

\f1 \'ca\'f4\'d0\'d4\'bc\'e0\'ca\'d3\'c6\'f7\'ba\'cd\'cf\'ec\'d3\'a6\'ca\'f4\'d0\'d4\'d6\'b5\'b5\'c4\'b1\'e4\'bb\'af\'a3\'ac\'c3\'bf\'b4\'ce\'ca\'f4\'d0\'d4\'b1\'bb\'c9\'e8\'d6\'c3\'d6\'b5\'b5\'c4\'ca\'b1\'ba\'f2\'be\'cd\'bb\'e1\'b5\'f7\'d3\'c3\'ca\'f4\'d0\'d4\'bc\'e0\'ca\'d3\'c6\'f7\'a3\'ac\'c9\'f5\'d6\'c1\'d0\'c2\'b5\'c4\'d6\'b5\'ba\'cd\'cf\'d6\'d4\'da\'b5\'c4\'d6\'b5\'cf\'e0\'cd\'ac\'b5\'c4\'ca\'b1\'ba\'f2\'d2\'b2\'b2\'bb\'c0\'fd\'cd\'e2
\f0 \

\f1 \'bf\'c9\'d2\'d4\'ce\'aa\'b3\'fd\'c1\'cb\'d1\'d3\'b3\'d9\'b4\'e6\'b4\'a2\'ca\'f4\'d0\'d4\'d6\'ae\'cd\'e2\'b5\'c4\'c6\'e4\'cb\'fb\'b4\'e6\'b4\'a2\'ca\'f4\'d0\'d4\'cc\'ed\'bc\'d3\'ca\'f4\'d0\'d4\'bc\'e0\'ca\'d3\'c6\'f7\'a3\'ac\'d2\'b2\'bf\'c9\'d2\'d4\'cd\'a8\'b9\'fd\'d6\'d8\'d4\'d8\'ca\'f4\'d0\'d4\'b5\'c4\'b7\'bd\'b7\'a8\'ce\'aa\'bc\'cc\'b3\'d0\'b5\'c4\'ca\'f4\'d0\'d4
\f0 (
\f1 \'b0\'fc\'c0\'a8\'b4\'e6\'b4\'a2\'ca\'f4\'d0\'d4\'ba\'cd\'bc\'c6\'cb\'e3\'ca\'f4\'d0\'d4
\f0 )
\f1 \'cc\'ed\'bc\'d3\'ca\'f4\'d0\'d4\'bc\'e0\'ca\'d3\'c6\'f7\'a1\'a3
\f0 \

\f1 \'d7\'a2\'d2\'e2\'a3\'ba\'b2\'bb\'d0\'e8\'d2\'aa\'ce\'aa\'ce\'de\'b7\'a8\'d6\'d8\'d4\'d8\'b5\'c4\'bc\'c6\'cb\'e3\'ca\'f4\'d0\'d4\'cc\'ed\'bc\'d3\'ca\'f4\'d0\'d4\'bc\'e0\'ca\'d3\'c6\'f7\'a3\'ac\'d2\'f2\'ce\'aa\'cd\'a8\'b9\'fd
\f0 setter
\f1 \'b7\'bd\'b7\'a8\'d6\'b1\'bd\'d3\'bc\'e0\'bf\'d8\'ba\'cd\'cf\'ec\'d3\'a6\'d6\'b5\'b5\'c4\'b1\'e4\'bb\'af\'a1\'a3
\f0 \
\
willSet
\f1 \'d4\'da\'c9\'e8\'d6\'c3\'d0\'c2\'b5\'c4\'d6\'b5\'c7\'b0\'b5\'f7\'d3\'c3
\f0 \
didSet
\f1 \'d4\'da\'d0\'c2\'b5\'c4\'d6\'b5\'b1\'bb\'c9\'e8\'d6\'c3\'d6\'ae\'ba\'f3\'c1\'a2\'bc\'b4\'b5\'f7\'d3\'c3
\f0 \
willSet
\f1 \'bc\'e0\'ca\'d3\'c6\'f7\'bb\'e1\'bd\'ab\'d0\'c2\'b5\'c4\'ca\'f4\'d0\'d4\'d6\'b5\'d7\'f7\'ce\'aa\'b9\'cc\'b6\'a8\'b2\'ce\'ca\'fd\'b4\'ab\'c8\'eb\'a3\'ac\'d4\'da
\f0 willSet
\f1 \'b5\'c4\'ca\'b5\'cf\'d6\'b4\'fa\'c2\'eb\'d6\'d0\'bf\'c9\'d2\'d4\'ce\'aa\'d5\'e2\'b8\'f6\'b2\'ce\'ca\'fd\'d6\'b8\'b6\'a8\'d2\'bb\'b8\'f6\'c3\'fb\'b3\'c6\'a3\'ac\'c8\'e7\'b9\'fb\'b2\'bb\'d6\'b8\'b6\'a8\'d4\'f2\'b2\'ce\'ca\'fd\'c8\'d4\'c8\'bb\'bf\'c9\'d3\'c3\'a3\'ac\'d5\'e2\'ca\'b1\'ca\'b9\'d3\'c3\'c4\'ac\'c8\'cf\'c3\'fb\'b3\'c6
\f0 newValue
\f1 \'b1\'ed\'ca\'be
\f0 \

\f1 \'c0\'e0\'cb\'c6\'b5\'c4\'a3\'ac
\f0 didSet
\f1 \'bc\'e0\'ca\'d3\'c6\'f7\'bb\'e1\'bd\'ab\'be\'c9\'b5\'c4\'ca\'f4\'d0\'d4\'d6\'b5\'d7\'f7\'ce\'aa\'b2\'ce\'ca\'fd\'b4\'ab\'c8\'eb\'a3\'ac\'bf\'c9\'d2\'d4\'ce\'aa\'b8\'c3\'b2\'ce\'ca\'fd\'c3\'fc\'c3\'fb\'bb\'f2\'d5\'df\'ca\'b9\'d3\'c3\'c4\'ac\'c8\'cf\'b2\'ce\'ca\'fd
\f0 oldValue
\f1 \'a1\'a3
\f0 \
\

\f1 \'d7\'a2\'d2\'e2\'a3\'ba
\f0 willSet
\f1 \'ba\'cd
\f0 didSet
\f1 \'bc\'e0\'ca\'d3\'c6\'f7\'d4\'da\'ca\'f4\'d0\'d4\'b3\'f5\'ca\'bc\'bb\'af\'b9\'fd\'b3\'cc\'d6\'d0\'b2\'bb\'bb\'e1\'b1\'bb\'b5\'f7\'d3\'c3\'a3\'ac\'cb\'fb\'c3\'c7\'d6\'bb\'bb\'e1\'b5\'b1\'ca\'f4\'d0\'d4\'b5\'c4\'d6\'b5\'d4\'da\'b3\'f5\'ca\'bc\'bb\'af\'d6\'ae\'cd\'e2\'b5\'c4\'b5\'d8\'b7\'bd\'b1\'bb\'c9\'e8\'d6\'c3\'ca\'b1\'b1\'bb\'b5\'f7\'d3\'c3\'a1\'a3
\f0 \
*/\
\
class StepCounter\
\{\
    var totalSteps: Int = 0\
    \{\
        willSet(newTotalSteps)\
        \{\
            println("About to set totalSteps to \\(newTotalSteps)")\
        \}\
        didSet\
        \{\
            if totalSteps > oldValue\
            \{\
                println("Added \\(totalSteps - oldValue) steps")\
            \}\
        \}\
    \}\
\}\
\
let stepCounter = StepCounter()\
stepCounter.totalSteps = 200\
//About to set totalSteps to 200\
//Added 200 steps\
\
stepCounter.totalSteps = 360\
//About to set totalSteps to 360\
//Added 160 steps\
\
stepCounter.totalSteps = 896\
//About to set totalSteps to 896\
//Added 536 steps\
\
//
\f1 \'c8\'ab\'be\'d6\'b1\'e4\'c1\'bf\'ba\'cd\'be\'d6\'b2\'bf\'b1\'e4\'c1\'bf
\f0 \
/*\

\f1 \'bc\'c6\'cb\'e3\'ca\'f4\'d0\'d4\'ba\'cd\'ca\'f4\'d0\'d4\'bc\'e0\'ca\'d3\'c6\'f7\'cb\'f9\'c3\'e8\'ca\'f6\'b5\'c4\'c4\'a3\'ca\'bd\'d2\'b2\'bf\'c9\'d2\'d4\'d3\'c3\'d3\'da\'c8\'ab\'be\'d6\'b1\'e4\'c1\'bf\'ba\'cd\'be\'d6\'b2\'bf\'b1\'e4\'c1\'bf\'a3\'ac\'c8\'ab\'be\'d6\'b1\'e4\'c1\'bf\'ca\'c7\'d4\'da\'ba\'af\'ca\'fd\'a1\'a2\'b7\'bd\'b7\'a8\'a1\'a2\'b1\'d5\'b0\'fc\'bb\'f2\'d5\'df\'c8\'ce\'ba\'ce\'c0\'e0\'d0\'cd\'d6\'ae\'cd\'e2\'b6\'a8\'d2\'e5\'b5\'c4\'b1\'e4\'c1\'bf\'a3\'ac\'be\'d6\'b2\'bf\'b1\'e4\'c1\'bf\'ca\'c7\'d4\'da\'ba\'af\'ca\'fd\'a3\'ac\'b7\'bd\'b7\'a8\'a3\'ac\'b1\'d5\'b0\'fc\'c4\'da\'b2\'bf\'b6\'a8\'d2\'e5\'b5\'c4\'b1\'e4\'c1\'bf\'a1\'a3
\f0 \
\

\f1 \'d7\'a2\'d2\'e2
\f0 :
\f1 \'c8\'ab\'be\'d6\'b5\'c4\'b3\'a3\'c1\'bf\'bb\'f2\'d5\'df\'b1\'e4\'c1\'bf\'b6\'bc\'ca\'c7\'d1\'d3\'b3\'d9\'bc\'c6\'cb\'e3\'b5\'c4\'a3\'ac\'b8\'fa\'d1\'d3\'b3\'d9\'b4\'e6\'b4\'a2\'ca\'f4\'d0\'d4\'cf\'e0\'cb\'c6\'a3\'ac\'b2\'bb\'cd\'ac\'b5\'c4\'b5\'d8\'b7\'bd\'d4\'da\'d3\'da\'a3\'ac\'c8\'ab\'be\'d6\'b5\'c4\'b3\'a3\'c1\'bf\'bb\'f2\'b1\'e4\'c1\'bf\'ca\'c7\'b2\'bb\'d0\'e8\'d2\'aa\'b1\'ea\'bc\'c7
\f0 lazy
\f1 \'cc\'d8\'d0\'d4\'a3\'bb\'be\'d6\'b2\'bf\'b7\'b6\'ce\'a7\'b5\'c4\'b3\'a3\'c1\'bf\'bb\'f2\'d5\'df\'b1\'e4\'c1\'bf\'b2\'bb\'bb\'e1\'d1\'d3\'b3\'d9\'bc\'c6\'cb\'e3\'a1\'a3
\f0 \
*/\
\
//
\f1 \'c0\'e0\'d0\'cd\'ca\'f4\'d0\'d4
\f0 \
/*\

\f1 \'ca\'b5\'c0\'fd\'b5\'c4\'ca\'f4\'d0\'d4\'ca\'fd\'d2\'d4\'d2\'bb\'b8\'f6\'cc\'d8\'b6\'a8\'c0\'e0\'d0\'cd\'ca\'b5\'c0\'fd\'a3\'ac\'c3\'bf\'b4\'ce\'c0\'e0\'d0\'cd\'ca\'b5\'c0\'fd\'bb\'af\'ba\'f3\'b6\'bc\'d3\'b5\'d3\'d0\'d7\'d4\'bc\'ba\'b5\'c4\'d2\'bb\'cc\'d7\'ca\'f4\'d0\'d4\'d6\'b5\'a3\'ac\'ca\'b5\'c0\'fd\'d6\'ae\'bc\'e4\'b5\'c4\'ca\'f4\'d0\'d4\'cf\'e0\'bb\'a5\'b6\'c0\'c1\'a2\'a1\'a3
\f0 \

\f1 \'c0\'e0\'d0\'cd\'ca\'f4\'d0\'d4\'d3\'c3\'d3\'da\'b6\'a8\'d2\'e5\'cc\'d8\'b6\'a8\'c0\'e0\'d0\'cd\'cb\'f9\'d3\'d0\'ca\'b5\'c0\'fd\'b9\'b2\'cf\'ed\'b5\'c4\'ca\'fd\'be\'dd
\f0 \
*/\
\
//
\f1 \'c0\'e0\'d0\'cd\'ca\'f4\'d0\'d4\'d3\'ef\'b7\'a8
\f0 \
/*\

\f1 \'ca\'b9\'d3\'c3\'b9\'d8\'bc\'fc\'d7\'d6
\f0 static
\f1 \'c0\'b4\'b6\'a8\'d2\'e5\'d6\'b5\'c0\'e0\'d0\'cd\'b5\'c4\'c0\'e0\'d0\'cd\'ca\'f4\'d0\'d4\'a3\'ac\'b9\'d8\'bc\'fc\'d7\'d6
\f0 class
\f1 \'c0\'b4\'ce\'aa\'c0\'e0
\f0 (Class)
\f1 \'b6\'a8\'d2\'e5\'c0\'e0\'d0\'cd\'ca\'f4\'d0\'d4
\f0 \
\

\f1 \'d7\'a2\'d2\'e2\'a3\'ba\'cf\'c2\'c3\'e6\'c0\'fd\'d7\'d3\'d6\'d0\'b5\'c4\'bc\'c6\'cb\'e3\'d0\'cd\'c0\'e0\'d0\'cd\'ca\'f4\'d0\'d4\'ca\'c7\'d6\'bb\'b6\'c1\'b5\'c4\'a3\'ac\'b5\'ab\'d2\'b2\'bf\'c9\'d2\'d4\'b6\'a8\'d2\'e5\'bf\'c9\'b6\'c1\'bf\'c9\'d0\'b4\'b5\'c4\'bc\'c6\'cb\'e3\'d0\'cd\'c0\'e0\'d0\'cd\'ca\'f4\'d0\'d4\'a3\'ac\'b8\'fa\'ca\'b5\'c0\'fd\'bc\'c6\'cb\'e3\'ca\'f4\'d0\'d4\'b5\'c4\'d3\'ef\'b7\'a8\'c0\'e0\'cb\'c6\'a1\'a3
\f0 \
*/\
struct SomeStruction\
\{\
    static var storedTypeProperty = "Some value."\
    static var computedTypeproperty: Int \{\
        return 0\
    \}\
\}\
enum SomeEnumeration\
\{\
    static var storedTypeProperty = "Some value."\
    static var computedTypeproperty: Int \{\
        return 0\
    \}\
\}\
class SomeClass\
\{\
    class var computedTypeproperty: Int \{\
        return 0\
    \}\
\}\
\
//
\f1 \'bb\'f1\'c8\'a1\'ba\'cd\'c9\'e8\'d6\'c3\'c0\'e0\'d0\'cd\'ca\'f4\'d0\'d4\'b5\'c4\'d6\'b5
\f0 \
/*\

\f1 \'b8\'fa\'ca\'b5\'c0\'fd\'b5\'c4\'ca\'f4\'d0\'d4\'d2\'bb\'d1\'f9\'a3\'ac\'c0\'e0\'d0\'cd\'ca\'f4\'d0\'d4\'b5\'c4\'b7\'c3\'ce\'ca\'d2\'b2\'ca\'c7\'cd\'a8\'b9\'fd\'b5\'e3\'d4\'cb\'cb\'e3\'b7\'fb\'c0\'b4\'bd\'f8\'d0\'d0\'a3\'ac\'b5\'ab\'ca\'c7\'a3\'ac\'c0\'e0\'d0\'cd\'ca\'f4\'d0\'d4\'ca\'c7\'cd\'a8\'b9\'fd\'c0\'e0\'d0\'cd\'b1\'be\'c9\'ed\'c0\'b4\'bb\'f1\'c8\'a1\'ba\'cd\'c9\'e8\'d6\'c3\'b5\'c4\'a3\'ac\'b6\'f8\'b2\'bb\'ca\'c7\'cd\'a8\'b9\'fd\'ca\'b5\'c0\'fd\'a1\'a3
\f0 \
*/\
println(SomeClass.computedTypeproperty)\
println(SomeStruction.storedTypeProperty)\
println(SomeEnumeration.storedTypeProperty) //
\f1 \'cd\'a8\'b9\'fd\'c0\'e0\'d0\'cd\'b1\'be\'c9\'ed\'bb\'f1\'c8\'a1\'ba\'cd\'c9\'e8\'d6\'c3\'a3\'ac\'b2\'bb\'d0\'e8\'d2\'aa\'cd\'a8\'b9\'fd\'ca\'b5\'c0\'fd\'a3\'ac\'c0\'e0\'cb\'c6\'d3\'da
\f0 objective-c
\f1 \'b5\'c4\'b5\'a5\'c0\'fd\'c4\'a3\'ca\'bd
\f0 \
\
\
struct AudioChannel\
\{\
    static let thresholdLevel = 10\
    static var maxInputLevelForAllChannels = 0\
    \
    var currentLevel: Int = 0\
    \{\
        didSet\
        \{\
            if currentLevel > AudioChannel.thresholdLevel\
            \{\
                currentLevel = AudioChannel.thresholdLevel\
            \}\
            \
            if currentLevel > AudioChannel.maxInputLevelForAllChannels\
            \{\
                AudioChannel.maxInputLevelForAllChannels = currentLevel\
            \}\
        \}\
    \}\
\}\
\
/*\

\f1 \'d7\'a2\'d2\'e2\'a3\'ba\'d4\'da\'b5\'da\'d2\'bb\'b8\'f6\'bc\'ec\'b2\'e9\'b9\'fd\'b3\'cc\'d6\'d0\'a3\'ac
\f0 didSet
\f1 \'ca\'f4\'d0\'d4\'bc\'e0\'bf\'d8\'c6\'f7\'bd\'ab
\f0 currentLevel
\f1 \'c9\'e8\'d6\'c3\'b3\'c9\'c1\'cb\'b2\'bb\'cd\'ac\'b5\'c4\'d6\'b5\'a3\'ac\'b5\'ab\'d5\'e2\'ca\'b1\'ba\'f2\'b2\'bb\'bb\'e1\'d4\'d9\'b4\'ce\'b5\'f7\'d3\'c3\'ca\'f4\'d0\'d4\'bc\'e0\'ca\'d3\'c6\'f7
\f0 \
*/\
\
var leftChannel = AudioChannel()\
var rightChannel = AudioChannel()\
\
leftChannel.currentLevel = 7\
println(leftChannel.currentLevel)\
println(AudioChannel.maxInputLevelForAllChannels)\
\
rightChannel.currentLevel = 11\
println(rightChannel.currentLevel)\
println(AudioChannel.maxInputLevelForAllChannels)\
\
}