{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset134 STHeitiSC-Light;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww22620\viewh18160\viewkind0
\deftab866
\pard\tx866\pardeftab866\pardirnatural

\f0\fs36 \cf0 \CocoaLigature0 2.21 
\f1 \'d0\'ad\'d2\'e9\'d1\'a7\'cf\'b0\'b1\'ca\'bc\'c7
\f0 \
\
import Foundation\
\
/* 
\f1 \'d0\'ad\'d2\'e9
\f0  */\
\
/*\
 Protocol(
\f1 \'d0\'ad\'d2\'e9
\f0 )
\f1 \'d3\'c3\'d3\'da\'cd\'b3\'d2\'bb\'b7\'bd\'b7\'a8\'ba\'cd\'ca\'f4\'d0\'d4\'b5\'c4\'c3\'fb\'b3\'c6\'a3\'ac\'b6\'f8\'b2\'bb\'ca\'b5\'cf\'d6\'c8\'ce\'ba\'ce\'b9\'a6\'c4\'dc\'a1\'a3\'d0\'ad\'d2\'e9\'c4\'dc\'b9\'bb\'b1\'bb\'c0\'e0\'a3\'ac\'c3\'b6\'be\'d9\'a3\'ac\'bd\'e1\'b9\'b9\'cc\'e5\'ca\'b5\'cf\'d6\'a3\'ac\'c2\'fa\'d7\'e3\'d0\'ad\'d2\'e9\'d2\'aa\'c7\'f3\'b5\'c4\'c0\'e0\'a3\'ac\'c3\'b6\'be\'d9\'a3\'ac\'bd\'e1\'b9\'b9\'cc\'e5\'b1\'bb\'b3\'c6\'ce\'aa\'d0\'ad\'d2\'e9\'b5\'c4\'d7\'f1\'d1\'ad\'d5\'df\'a1\'a3
\f0 \
 
\f1 \'d7\'f1\'d1\'ad\'d5\'df\'d0\'e8\'d2\'aa\'cc\'e1\'b9\'a9\'d0\'ad\'d2\'e9\'d6\'b8\'b6\'a8\'b5\'c4\'b3\'c9\'d4\'b1\'a3\'ac\'c8\'e7\'ca\'f4\'d0\'d4\'a3\'ac\'b7\'bd\'b7\'a8\'a3\'ac\'b2\'d9\'d7\'f7\'b7\'fb\'a3\'ac\'cf\'c2\'b1\'ea\'b5\'c8\'a1\'a3
\f0 \
*/\
\
//
\f1 \'d0\'ad\'d2\'e9\'b5\'c4\'d3\'ef\'b7\'a8
\f0 \
\
//
\f1 \'ca\'f4\'d0\'d4\'d2\'aa\'c7\'f3
\f0 \
/*\
  
\f1 \'d0\'ad\'d2\'e9\'c4\'dc\'b9\'bb\'d2\'aa\'c7\'f3\'c6\'e4\'d7\'f1\'d1\'ad\'d5\'df\'b1\'d8\'d0\'eb\'b0\'fc\'ba\'ac\'d3\'d0\'d2\'bb\'d0\'a9\'cc\'d8\'b6\'a8\'c3\'fb\'b3\'c6\'ba\'cd\'c0\'e0\'d0\'cd\'b5\'c4\'ca\'b5\'c0\'fd\'ca\'f4\'d0\'d4
\f0 (instance property)
\f1 \'bb\'f2\'c0\'e0\'ca\'f4\'d0\'d4
\f0 (type property),
\f1 \'d2\'b2\'c4\'dc\'b9\'bb\'d2\'aa\'c7\'f3\'ca\'f4\'d0\'d4\'b5\'c4
\f0 (
\f1 \'c9\'e8\'d6\'c3\'c8\'a8\'cf\'de
\f0 )settable
\f1 \'ba\'cd
\f0 (
\f1 \'b7\'c3\'ce\'ca\'c8\'a8\'cf\'de
\f0 )gettable,
\f1 \'b5\'ab\'cb\'fc\'b2\'bb\'d2\'aa\'c7\'f3\'ca\'f4\'d0\'d4\'ca\'c7\'b4\'e6\'b4\'a2\'d0\'cd\'ca\'f4\'d0\'d4
\f0 (stored property)
\f1 \'bb\'b9\'ca\'c7\'bc\'c6\'cb\'e3\'d0\'cd\'ca\'f4\'d0\'d4
\f0 (calulate property)
\f1 \'a1\'a3
\f0 \
*/\
\
protocol FullyNamed\
\{\
    var fullName: String \{get\}\
\}\
\
struct Person: FullyNamed\
\{\
    var fullName: String  //
\f1 \'d7\'f1\'d1\'ad\'d0\'ad\'d2\'e9
\f0 \
\}\
\
let john = Person(fullName: "John Appleseed")\
\
class Startship: FullyNamed\
\{\
    var prefix: String?\
    var name: String\
    init(name: String, prefix: String? = nil)\
    \{\
        self.name = name\
        self.prefix = prefix\
    \}\
    \
    var fullName: String\
    \{\
        return (prefix != nil ? prefix! + " ": "") + name\
    \}\
\}\
\
var ncc1701 = Startship(name: "Enterprese", prefix: "USS")\
\
//
\f1 \'b7\'bd\'b7\'a8\'d2\'aa\'c7\'f3
\f0 \
/*\
  
\f1 \'d0\'ad\'d2\'e9\'c4\'dc\'b9\'bb\'d2\'aa\'c7\'f3\'c6\'e4\'d7\'f1\'d1\'ad\'d5\'df\'b1\'d8\'b1\'b8\'c4\'b3\'d0\'a9\'cc\'d8\'b6\'a8\'b5\'c4\'ca\'b5\'c0\'fd\'b7\'bd\'b7\'a8\'ba\'cd\'c0\'e0\'b7\'bd\'b7\'a8\'a1\'a3\'d0\'ad\'d2\'e9\'b7\'bd\'b7\'a8\'b5\'c4\'c9\'f9\'c3\'f7\'ba\'cd\'c6\'d5\'cd\'a8\'b7\'bd\'b7\'a8\'c9\'f9\'c3\'f7\'cf\'e0\'cb\'c6\'a3\'ac\'b5\'ab\'cb\'fb\'b2\'bb\'d0\'e8\'d2\'aa\'b7\'bd\'b7\'a8\'c4\'da\'c8\'dd\'a1\'a3
\f0 \
\

\f1 \'d7\'a2\'d2\'e2\'a3\'ba\'d0\'ad\'d2\'e9\'b7\'bd\'b7\'a8\'d6\'a7\'b3\'d6\'b1\'e4\'b3\'a4\'b2\'ce\'ca\'fd
\f0 (variadic parameter),
\f1 \'b2\'bb\'d6\'a7\'b3\'d6\'c4\'ac\'c8\'cf\'b2\'ce\'ca\'fd
\f0 (default parameter)
\f1 \'a1\'a3
\f0 \

\f1 \'c7\'b0\'d6\'c3
\f0 class
\f1 \'b9\'d8\'bc\'fc\'d7\'d6\'b1\'ed\'ca\'be\'d0\'ad\'d2\'e9\'d6\'d0\'b5\'c4\'b3\'c9\'d4\'b1\'ce\'aa\'c0\'e0\'b3\'c9\'d4\'b1\'a3\'bb\'b5\'b1\'d0\'ad\'d2\'e9\'d3\'c3\'d3\'da\'b1\'bb\'c3\'b6\'be\'d9\'bb\'f2\'bd\'e1\'b9\'b9\'cc\'e5\'d7\'f1\'d1\'ad\'ca\'b1\'a3\'ac\'d4\'f2\'ca\'b9\'d3\'c3
\f0 static
\f1 \'b9\'d8\'bc\'fc\'d7\'d6\'a3\'ba
\f0 \
\
*/\
\
protocol SomeProtocol\
\{\
    class func someTypeMethod()\
\}\
\
protocol RandomNumberGenerator\
\{\
    func random() -> Double\
\}\
\
class LinearConfigruentialGenerator: RandomNumberGenerator\
\{\
    var lastRandom = 42.0\
    let m = 139968.0\
    let a = 3877.0\
    let c = 29573.0\
    func random() -> Double\
    \{\
        lastRandom = ((lastRandom * a + c) % m)\
        return lastRandom / m\
    \}\
\}\
\
let generator = LinearConfigruentialGenerator()\
println("Here's a random number:\\(generator.random())")\
\
println("And another one:\\(generator.random())")\
\
//
\f1 \'cd\'bb\'b1\'e4\'b7\'bd\'b7\'a8\'d2\'aa\'c7\'f3
\f0 \
/*\

\f1 \'c4\'dc\'d4\'da\'b7\'bd\'b7\'a8\'bb\'f2\'ba\'af\'ca\'fd\'c4\'da\'b2\'bf\'b8\'c4\'b1\'e4\'ca\'b5\'c0\'fd\'c0\'e0\'d0\'cd\'b5\'c4\'b7\'bd\'b7\'a8\'b3\'c6\'ce\'aa\'cd\'bb\'b1\'e4\'b7\'bd\'b7\'a8\'a1\'a3\'d4\'da\'d6\'b5\'c0\'e0\'d0\'cd
\f0 (
\f1 \'cc\'d8\'d6\'b8\'bd\'e1\'b9\'b9\'cc\'e5\'ba\'cd\'c3\'b6\'be\'d9
\f0 )
\f1 \'d6\'d0\'b5\'c4\'ba\'af\'ca\'fd\'c7\'b0\'d7\'ba\'bc\'d3\'c9\'cf
\f0 mutating
\f1 \'b9\'d8\'bc\'fc\'d7\'d6\'c0\'b4\'b1\'ed\'ca\'be\'b8\'c3\'ba\'af\'ca\'fd\'d4\'ca\'d0\'ed\'b8\'c4\'b1\'e4\'b8\'c3\'ca\'b5\'c0\'fd\'ba\'cd\'c6\'e4\'ca\'f4\'d0\'d4\'b5\'c4\'c0\'e0\'d0\'cd\'a1\'a3
\f0 \
\

\f1 \'c0\'e0\'d6\'d0\'b5\'c4\'b3\'c9\'d4\'b1\'ce\'aa\'d2\'fd\'d3\'c3\'c0\'e0\'d0\'cd\'a3\'ac\'bf\'c9\'d2\'d4\'b7\'bd\'b1\'e3\'b5\'c4\'d0\'de\'b8\'c4\'ca\'b5\'c0\'fd\'bc\'b0\'c6\'e4\'ca\'f4\'d0\'d4\'b5\'c4\'d6\'b5\'b6\'f8\'ce\'de\'d0\'e8\'b8\'c4\'b1\'e4\'c0\'e0\'d0\'cd\'a3\'bb\'b6\'f8\'bd\'e1\'b9\'b9\'cc\'e5\'ba\'cd\'c3\'b6\'be\'d9\'be\'f9\'ce\'aa\'d6\'b5\'c0\'e0\'d0\'cd
\f0 (Value Type),
\f1 \'d0\'de\'b8\'c4\'b1\'e4\'c1\'bf\'b5\'c4\'d6\'b5\'be\'cd\'cf\'e0\'b5\'b1\'d3\'da\'d0\'de\'b8\'c4\'b1\'e4\'c1\'bf\'b5\'c4\'c0\'e0\'d0\'cd\'a3\'ac\'b6\'f8
\f0 Swift
\f1 \'c4\'ac\'c8\'cf\'b2\'bb\'d4\'ca\'d0\'ed\'d0\'de\'b8\'c4\'c0\'e0\'d0\'cd\'a3\'ac\'d2\'f2\'b4\'cb\'d0\'e8\'d2\'aa\'c7\'b0\'d6\'c3
\f0 nutating
\f1 \'b9\'d8\'bc\'fc\'d7\'d6\'c0\'b4\'b1\'ed\'ca\'be\'b8\'c3\'ba\'af\'ca\'fd\'c4\'dc\'b9\'bb\'d0\'de\'b8\'c4\'c0\'e0\'d0\'cd
\f0 \
\

\f1 \'d7\'a2\'d2\'e2\'a3\'ba\'d3\'c3
\f0 class
\f1 \'ca\'b5\'cf\'d6\'d0\'ad\'d2\'e9\'d6\'d0\'b5\'c4
\f0 mutating
\f1 \'b7\'bd\'b7\'a8\'ca\'b1\'a3\'ac\'b2\'bb\'d3\'c3\'d0\'b4
\f0 mutating
\f1 \'b9\'d8\'bc\'fc\'d7\'d6\'a3\'bb\'d3\'c3\'bd\'e1\'b9\'b9\'cc\'e5\'a3\'ac\'c3\'b6\'be\'d9\'ca\'b5\'cf\'d6\'d0\'ad\'d2\'e9\'d6\'d0\'b5\'c4
\f0 mutating
\f1 \'b7\'bd\'b7\'a8\'ca\'b1\'a3\'ac\'b1\'d8\'d0\'eb\'d0\'b4
\f0 mutating
\f1 \'b9\'d8\'bc\'fc\'d7\'d6\'a1\'a3
\f0 \
*/\
\
protocol Togglable\
\{\
    mutating func toggle()\
\}\
\
enum OnOffSwitch: Togglable\
\{\
    case Off,On\
    mutating func toggle()\
    \{\
        switch self\
        \{\
           case Off:\
              self = On\
           case On:\
              self = Off\
        \}\
    \}\
\}\
\
var lightSwitch = OnOffSwitch.Off\
lightSwitch.toggle()\
\
//
\f1 \'d0\'ad\'d2\'e9\'c0\'e0\'d0\'cd
\f0 \
/*\

\f1 \'d0\'ad\'d2\'e9\'b1\'be\'c9\'ed\'b2\'a2\'b2\'bb\'ca\'b5\'cf\'d6\'c8\'ce\'ba\'ce\'b9\'a6\'c4\'dc\'a3\'ac\'b5\'ab\'c4\'e3\'bf\'c9\'d2\'d4\'bd\'ab\'cb\'fc\'b5\'b1\'d7\'f6\'c0\'e0\'d0\'cd\'c0\'b4\'ca\'b9\'d3\'c3\'a1\'a3
\f0 \

\f1 \'ca\'b9\'d3\'c3\'b3\'a1\'be\'b0\'a3\'ba
\f0 \
1.
\f1 \'d7\'f7\'ce\'aa\'ba\'af\'ca\'fd\'a3\'ac\'b7\'bd\'b7\'a8\'bb\'f2\'d5\'df\'b9\'b9\'d4\'ec\'c6\'f7\'d6\'d0\'b5\'c4\'b2\'ce\'ca\'fd\'c0\'e0\'d0\'cd\'a3\'ac\'b7\'b5\'bb\'d8\'d6\'b5\'c0\'e0\'d0\'cd
\f0 \
2.
\f1 \'d7\'f7\'ce\'aa\'b3\'a3\'c1\'bf\'a3\'ac\'b1\'e4\'c1\'bf\'a3\'ac\'ca\'f4\'d0\'d4\'b5\'c4\'c0\'e0\'d0\'cd
\f0 \
3.
\f1 \'d7\'f7\'ce\'aa\'ca\'fd\'d7\'e9\'a3\'ac\'d7\'d6\'b5\'e4\'bb\'f2\'d5\'df\'c6\'e4\'cb\'fb\'c8\'dd\'c6\'f7\'d6\'d0\'b5\'c4\'d4\'aa\'cb\'d8\'c0\'e0\'d0\'cd
\f0 \
\

\f1 \'d7\'a2\'d2\'e2\'a3\'ba\'d0\'ad\'d2\'e9\'c0\'e0\'d0\'cd\'d3\'a6\'d3\'eb\'c6\'e4\'cb\'fb\'c0\'e0\'d0\'cd
\f0 (Int,Double,String)
\f1 \'b5\'c4\'d0\'b4\'b7\'a8\'cf\'e0\'cd\'ac\'a3\'ac\'ca\'b9\'d3\'c3\'cd\'d5\'b7\'e5\'ca\'bd
\f0 \
*/\
class Dice\
\{\
    let sides: Int\
    let generator: RandomNumberGenerator  //
\f1 \'bf\'c9\'d2\'d4\'b1\'bb\'b8\'b3\'d6\'b5\'ce\'aa\'c8\'ce\'d2\'e2\'d7\'f1\'d1\'ad\'b8\'c3\'d0\'ad\'d2\'e9\'b5\'c4\'c0\'e0\'d0\'cd
\f0 \
    init(sides: Int, generator: RandomNumberGenerator)\
    \{\
        self.sides = sides\
        self.generator = generator\
    \}\
    \
    func roll() -> Int\
    \{\
        return Int(generator.random() * Double(sides)) + 1\
    \}\
\}\
\
var d6 = Dice(sides: 6, generator: LinearConfigruentialGenerator())\
for _ in 1...5\
\{\
    println("Random dice roll is \\(d6.roll())")\
\}\
\
//
\f1 \'ce\'af\'cd\'d0
\f0 (
\f1 \'b4\'fa\'c0\'ed
\f0 )
\f1 \'c4\'a3\'ca\'bd
\f0 \
/*\

\f1 \'ce\'af\'cd\'d0\'ca\'c7\'d2\'bb\'d6\'d6\'c9\'e8\'bc\'c6\'c4\'a3\'ca\'bd\'a3\'ac\'cb\'fc\'d4\'ca\'d0\'ed\'c0\'e0\'bb\'f2\'bd\'e1\'b9\'b9\'cc\'e5\'bd\'ab\'d2\'bb\'d0\'a9\'d0\'e8\'d2\'aa\'cb\'fb\'c3\'c7\'b8\'ba\'d4\'f0\'b5\'c4\'b9\'a6\'c4\'dc\'bd\'bb\'d3\'c9
\f0 (
\f1 \'ce\'af\'cd\'d0
\f0 )
\f1 \'b8\'f8\'c6\'e4\'cb\'fb\'b5\'c4\'c0\'e0\'d0\'cd
\f0 \

\f1 \'ce\'af\'cd\'d0\'b5\'c4\'c4\'a3\'ca\'bd\'ba\'dc\'bc\'f2\'b5\'a5\'a3\'ac\'b6\'a8\'d2\'e5\'d0\'ad\'d2\'e9\'c0\'b4\'b7\'e2\'d7\'b0\'c4\'c7\'d0\'a9\'d0\'e8\'d2\'aa\'b1\'bb\'ce\'af\'cd\'d0\'b5\'c4\'ba\'af\'ca\'fd\'ba\'cd\'b7\'bd\'b7\'a8\'a3\'ac\'ca\'b9\'c6\'e4\'d7\'f1\'d1\'ad\'d5\'df\'d3\'b5\'d3\'d0\'d5\'e2\'d0\'a9\'b1\'bb\'ce\'af\'cd\'d0\'b5\'c4\'ba\'af\'ca\'fd\'ba\'cd\'b7\'bd\'b7\'a8\'a1\'a3
\f0 \

\f1 \'ce\'af\'cd\'d0\'c4\'a3\'ca\'bd\'bf\'c9\'d2\'d4\'d3\'c3\'c0\'b4\'cf\'ec\'d3\'a6\'cc\'d8\'b6\'a8\'b5\'c4\'b6\'af\'d7\'f7\'bb\'f2\'bd\'d3\'ca\'dc\'cd\'e2\'b2\'bf\'ca\'fd\'be\'dd\'d4\'b4\'cc\'e1\'b9\'a9\'b5\'c4\'ca\'fd\'be\'dd\'a3\'ac\'b6\'f8\'ce\'de\'d0\'e8\'d2\'aa\'d6\'aa\'b5\'c0\'cd\'e2\'b2\'bf\'ca\'fd\'be\'dd\'d4\'b4\'b5\'c4\'c0\'e0\'d0\'cd
\f0 \
*/\
\
protocol DiceGame\
\{\
    var dice: Dice \{get\}\
    func play()\
\}\
\
protocol DiceGameDelegate\
\{\
    func gameDidStart(game: DiceGame)\
    func game(game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int)\
    func gameDidEnd(game: DiceGame)\
\}\
\
class SnakesAndladders: DiceGame\
\{\
    let finalSquare = 25\
    let dice = Dice(sides: 6, generator: LinearConfigruentialGenerator())\
    \
    var square = 0\
    var board: [Int]\
    init()\
    \{\
        board = [Int](count:finalSquare + 1, repeatedValue: 0)\
        board[03] = +08; board[06] = +11; board[09] = +09; board[10] = +02\
        board[14] = -10; board[19] = -11; board[22] = -02; board[24] = -08\
    \}\
    \
    var delegate: DiceGameDelegate?\
    func play()\
    \{\
        square = 0\
        delegate?.gameDidStart(self)\
        gameLoop: while square != finalSquare\
        \{\
            let diceRoll = dice.roll()\
            delegate?.game(self, didStartNewTurnWithDiceRoll: diceRoll)\
            \
            switch square + diceRoll\
            \{\
                case finalSquare:\
                    break gameLoop\
                case let newSquare where newSquare > finalSquare:\
                    continue gameLoop\
                default:\
                    square += diceRoll\
                    square += board[square]\
            \}\
        \}\
        \
        delegate?.gameDidEnd(self)\
    \}\
\}\
\
class DiceGameTracker: DiceGameDelegate\
\{\
    var numberOfTurns = 0\
    func gameDidStart(game: DiceGame)\
    \{\
        numberOfTurns = 0\
        if game is SnakesAndladders\
        \{\
            println("Started a new game of Snakes and Ladders")\
        \}\
        \
        println("The game is using a \\(game.dice.sides)")\
    \}\
    \
    func game(game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int)\
    \{\
        ++numberOfTurns\
        println("Rolled a \\(diceRoll)")\
    \}\
    \
    func gameDidEnd(game: DiceGame)\
    \{\
        println("The game lasted for \\(numberOfTurns) turns")\
    \}\
\}\
\
\
let tracker = DiceGameTracker()\
let game = SnakesAndladders()\
game.delegate = tracker\
game.play()\
\
//
\f1 \'d4\'da\'c0\'a9\'d5\'b9\'d6\'d0\'cc\'ed\'bc\'d3\'d0\'ad\'d2\'e9\'b3\'c9\'d4\'b1
\f0 \
protocol TextRepresentable\
\{\
    func asText() -> String\
\}\
\
extension Dice: TextRepresentable\
\{\
    func asText() -> String\
    \{\
        return "A \\(sides) -sided dice"\
    \}\
\}\
\
let d12 = Dice(sides: 12, generator: LinearConfigruentialGenerator())\
println(d12.asText())\
\
extension SnakesAndladders: TextRepresentable\
\{\
    func asText() -> String\
    \{\
        return "A game of Snake and Ladders with \\(finalSquare) squares"\
    \}\
\}\
\
println(game.asText())\
\
//
\f1 \'cd\'a8\'b9\'fd\'d1\'d3\'d5\'b9\'b2\'b9\'b3\'e4\'d0\'ad\'d2\'e9\'c9\'f9\'c3\'f7
\f0 \
/*\

\f1 \'b5\'b1\'d2\'bb\'b8\'f6\'c0\'e0\'d0\'cd\'d2\'d1\'be\'ad\'ca\'b5\'cf\'d6\'c1\'cb\'d0\'ad\'d2\'e9\'d6\'d0\'b5\'c4\'cb\'f9\'d3\'d0\'d2\'aa\'c7\'f3\'a3\'ac\'c8\'b4\'c3\'bb\'d3\'d0\'c9\'f9\'c3\'f7\'ca\'b1\'a3\'ac\'bf\'c9\'d2\'d4\'cd\'a8\'b9\'fd\'c0\'a9\'d5\'b9\'c0\'b4\'b2\'b9\'b3\'e4\'d0\'ad\'d2\'e9\'c9\'f9\'c3\'f7
\f0 \
*/\
\
struct Hamster\
\{\
    var name: String\
    func asText() -> String\
    \{\
        return "A hamster named \\(name)"\
    \}\
\}\
\
extension Hamster: TextRepresentable \{\}\
\
let simonTheHamster = Hamster(name: "Simon")\
let somethingTextRepresentable: TextRepresentable = simonTheHamster\
println(somethingTextRepresentable.asText())\
println(simonTheHamster.asText())\
\
//
\f1 \'d7\'a2\'d2\'e2\'a3\'ba\'bc\'b4\'ca\'b9\'c2\'fa\'d7\'e3\'c1\'cb\'d0\'ad\'d2\'e9\'b5\'c4\'cb\'f9\'d3\'d0\'d2\'aa\'c7\'f3\'a3\'ac\'c0\'e0\'d0\'cd\'d2\'b2\'b2\'bb\'bb\'e1\'d7\'d4\'b6\'af\'d7\'aa\'b1\'e4\'a3\'ac\'d2\'f2\'b4\'cb\'c4\'e3\'b1\'d8\'d0\'eb\'ce\'aa\'cb\'fb\'d7\'f6\'b3\'f6\'c3\'f7\'cf\'d4\'b5\'c4\'d0\'ad\'d2\'e9\'c9\'f9\'c3\'f7
\f0 \
\
//
\f1 \'bc\'af\'ba\'cf\'d6\'d0\'b5\'c4\'d0\'ad\'d2\'e9\'c0\'e0\'d0\'cd
\f0 \
  //
\f1 \'d0\'ad\'d2\'e9\'c0\'e0\'d0\'cd\'bf\'c9\'d2\'d4\'b1\'bb\'bc\'af\'ba\'cf\'ca\'b9\'d3\'c3\'a3\'ac\'b1\'ed\'ca\'be\'bd\'e1\'ba\'cf\'d6\'d0\'b5\'c4\'d4\'aa\'cb\'d8\'be\'f9\'ce\'aa\'d0\'ad\'d2\'e9\'c0\'e0\'d0\'cd
\f0 \
let things: [TextRepresentable] = [game,d12,simonTheHamster]\
\
for thing in things\
\{\
    println(thing.asText())\
\}\
\
//thing
\f1 \'b1\'bb\'b5\'b1\'d7\'f6
\f0 TextRepresentable
\f1 \'c0\'e0\'d0\'cd\'b6\'f8\'b2\'bb\'ca\'c7
\f0 Dice
\f1 \'a3\'ac
\f0 DiceGame
\f1 \'a3\'ac
\f0 Hamster
\f1 \'b5\'c8\'c0\'e0\'d0\'cd\'a1\'a3\'d2\'f2\'b4\'cb\'c4\'dc\'c7\'d2\'bd\'f6\'c4\'dc\'b5\'f7\'d3\'c3
\f0 asText
\f1 \'b7\'bd\'b7\'a8
\f0 \
\
//
\f1 \'d0\'ad\'d2\'e9\'b5\'c4\'bc\'cc\'b3\'d0
\f0 \
  //
\f1 \'d0\'ad\'d2\'e9\'c4\'dc\'b9\'bb\'bc\'cc\'b3\'d0\'d2\'bb\'b8\'f6\'b5\'bd\'b6\'e0\'b8\'f6\'c6\'e4\'cb\'fb\'d0\'ad\'d2\'e9\'a1\'a3\'d3\'ef\'b7\'a8\'d3\'eb\'c0\'e0\'b5\'c4\'bc\'cc\'b3\'d0\'cf\'e0\'cb\'c6\'a3\'ac\'b6\'e0\'b8\'f6\'d0\'ad\'d2\'e9\'bc\'e4\'d3\'c3\'b6\'ba\'ba\'c5
\f0 (,)
\f1 \'b7\'d6\'b8\'f4
\f0 \
\
//
\f1 \'d0\'ad\'d2\'e9\'ba\'cf\'b3\'c9
\f0 \
  //
\f1 \'d2\'bb\'b8\'f6\'d0\'ad\'d2\'e9\'bf\'c9\'d3\'c9\'b6\'e0\'b8\'f6\'d0\'ad\'d2\'e9\'b2\'c9\'d3\'c3
\f0 protocol<SomeProtocol,Anotherprotocol>
\f1 \'d5\'e2\'d1\'f9\'b5\'c4\'b8\'f1\'ca\'bd\'bd\'f8\'d0\'d0\'d7\'e9\'ba\'cf\'a3\'ac\'b3\'c6\'ce\'aa\'d0\'ad\'d2\'e9\'ba\'cf\'b3\'c9
\f0 (protocol composition)
\f1 \'a1\'a3
\f0 \
protocol Named\
\{\
    var name: String \{get\}\
\}\
\
protocol Aged\
\{\
    var age: Int \{get\}\
\}\
\
struct Persons: Named,Aged\
\{\
    var name: String\
    var age: Int\
\
\}\
\
func wishHappyBirthday(celebrator: protocol<Named,Aged>)\
\{\
    println("Happy birthday \\(celebrator.name) - you're \\(celebrator.age)!")\
\}\
\
let birthdayperson = Persons(name: "Molcolm", age: 21)\
wishHappyBirthday(birthdayperson)\
\
//
\f1 \'d7\'a2\'d2\'e2
\f0 :
\f1 \'d0\'ad\'d2\'e9\'ba\'cf\'b3\'c9\'b2\'a2\'b2\'bb\'bb\'e1\'c9\'fa\'b3\'c9\'d2\'bb\'b8\'f6\'d0\'c2\'d0\'ad\'d2\'e9\'c0\'e0\'d0\'cd\'a3\'ac\'b6\'f8\'ca\'c7\'bd\'ab\'b6\'e0\'b8\'f6\'d0\'ad\'d2\'e9\'ba\'cf\'b3\'c9\'ce\'aa\'d2\'bb\'b8\'f6\'c1\'d9\'ca\'b1\'b5\'c4\'d0\'ad\'d2\'e9\'a3\'ac\'b3\'ac\'b3\'f6\'b7\'b6\'ce\'a7\'ba\'f3\'c1\'a2\'bc\'b4\'ca\'a7\'d0\'a7\'a1\'a3
\f0 \
\
//
\f1 \'d1\'e9\'d6\'a4\'d0\'ad\'d2\'e9\'b5\'c4\'d2\'bb\'d6\'c2\'d0\'d4
\f0 \
/*\

\f1 \'ca\'b9\'d3\'c3
\f0 is
\f1 \'d1\'e9\'d6\'a4\'d0\'ad\'d2\'e9\'b5\'c4\'d2\'bb\'d6\'c2\'d0\'d4\'a3\'ac\'ca\'b9\'d3\'c3
\f0 as
\f1 \'bd\'ab\'d0\'ad\'d2\'e9\'c0\'e0\'d0\'cd\'d7\'aa\'bb\'bb
\f0 (downcast)
\f1 \'ce\'aa\'b5\'c4\'c6\'e4\'cb\'fb\'d0\'ad\'d2\'e9\'c0\'e0\'d0\'cd\'a1\'a3\'bc\'ec\'d1\'e9\'d3\'eb\'d7\'aa\'bb\'bb\'b5\'c4\'d3\'ef\'b7\'a8\'ba\'cd\'d6\'ae\'c7\'b0\'b5\'c4\'cf\'e0\'cd\'ac\'a1\'a3
\f0 \
1.is
\f1 \'b2\'d9\'d7\'f7\'b7\'fb\'d3\'c3\'c0\'b4\'bc\'ec\'b2\'e9\'ca\'b5\'c0\'fd\'ca\'c7\'b7\'f1\'d7\'f1\'d1\'ad\'c1\'cb\'c4\'b3\'b8\'f6\'d0\'ad\'d2\'e9\'a1\'a3
\f0 \
2.as
\f1 \'a3\'bf\'b7\'b5\'bb\'d8\'d2\'bb\'b8\'f6\'bf\'c9\'d1\'a1\'d6\'b5\'a3\'ac\'b5\'b1\'ca\'b5\'c0\'fd\'d7\'f1\'d1\'ad\'d0\'ad\'d2\'e9\'ca\'b1\'a3\'ac\'b7\'b5\'bb\'d8\'b8\'c3\'d0\'ad\'d2\'e9\'c0\'e0\'d0\'cd\'a3\'bb\'b7\'f1\'d4\'f2\'b7\'b5\'bb\'d8
\f0 nil\
3.as
\f1 \'d3\'c3\'d3\'da\'c7\'bf\'d6\'c6\'cf\'f2\'cf\'c2\'d7\'aa\'c0\'e0\'d0\'cd
\f0 \
*/\
\
@objc protocol HasArea\
\{\
    var area: Double \{get\}\
\}\
//
\f1 \'d7\'a2\'d2\'e2\'a3\'ba
\f0 @objc
\f1 \'d3\'c3\'c0\'b4\'b1\'ed\'ca\'be\'d0\'ad\'d2\'e9\'ca\'c7\'bf\'c9\'d1\'a1\'b5\'c4\'a3\'ac\'d2\'b2\'bf\'c9\'d2\'d4\'d3\'c3\'c0\'b4\'b1\'ed\'ca\'be\'b1\'a9\'c2\'a9\'b8\'f8
\f0 objective-c
\f1 \'b5\'c4\'b4\'fa\'c2\'eb\'a3\'ac\'b4\'cb\'cd\'e2\'a3\'ac
\f0 @objc
\f1 \'d0\'cd\'d0\'ad\'d2\'e9\'d6\'bb\'b6\'d4\'c0\'e0\'d3\'d0\'d0\'a7\'a3\'ac\'d2\'f2\'b4\'cb\'d6\'bb\'c4\'dc\'d4\'da\'c0\'e0\'d6\'d0\'bc\'ec\'b2\'e9\'d0\'ad\'d2\'e9\'b5\'c4\'d2\'bb\'d6\'c2\'d0\'d4\'a1\'a3
\f0 \
\
\
class Circle: HasArea\
\{\
    let pi = 3.1415927\
    var radius: Double\
    var area: Double\
    \{\
        return pi * radius * radius\
    \}\
    \
    init(radius: Double)\
    \{\
        self.radius = radius\
    \}\
\}\
\
class Country: HasArea\
\{\
    var area: Double\
    init(area: Double)\
    \{\
        self.area = area\
    \}\
\}\
\
class Animal\
\{\
    var legs: Int\
    init(legs: Int)\
    \{\
        self.legs = legs\
    \}\
\}\
\
let objects: [AnyObject] = [\
    Circle(radius: 2.0),\
    Country(area: 234_610),\
    Animal(legs: 4)\
]\
\
for object in objects\
\{\
    if let objectWithArea = object as? HasArea\
    \{\
        println("Area is \\(objectWithArea.area)")\
    \}\
    else\
    \{\
        println("Something that doesn't have an area")\
    \}\
\}\
\
//objects
\f1 \'ca\'fd\'d7\'e9\'d6\'d0\'b5\'c4\'c0\'e0\'d0\'cd\'b2\'a2\'b2\'bb\'bb\'e1\'d2\'f2\'ce\'aa\'cf\'f2\'cf\'c2\'d7\'aa\'d0\'cd\'b6\'f8\'b8\'c4\'b1\'e4\'a3\'ac\'b5\'b1\'cb\'fb\'c3\'c7\'b1\'bb\'b8\'b3\'d6\'b5\'b8\'f8
\f0 objectWithArea
\f1 \'ca\'b1\'d6\'bb\'b1\'bb\'ca\'d3\'ce\'aa
\f0 HasArea
\f1 \'c0\'e0\'d0\'cd\'a3\'ac\'d2\'f2\'b4\'cb\'d6\'bb\'d3\'d0
\f0 area
\f1 \'ca\'f4\'d0\'d4\'c4\'dc\'b9\'bb\'b1\'bb\'b7\'c3\'ce\'ca\'a1\'a3
\f0 \
\
//
\f1 \'bf\'c9\'d1\'a1\'d0\'ad\'d2\'e9\'d2\'aa\'c7\'f3
\f0 \
  //
\f1 \'bf\'c9\'d1\'a1\'d0\'ad\'d2\'e9\'ba\'ac\'d3\'d0\'bf\'c9\'d1\'a1\'b3\'c9\'d4\'b1\'a3\'ac\'c6\'e4\'d7\'f1\'d1\'ad\'d5\'df\'bf\'c9\'d2\'d4\'d1\'a1\'d4\'f1\'ca\'c7\'b7\'f1\'ca\'b5\'cf\'d6\'d5\'e2\'d0\'a9\'b3\'c9\'d4\'b1\'a1\'a3\'d4\'da\'d0\'ad\'d2\'e9\'d6\'d0\'ca\'b9\'d3\'c3
\f0 optioal
\f1 \'b9\'d8\'bc\'fc\'d7\'d6\'d7\'f7\'ce\'aa\'c7\'b0\'d7\'ba\'c0\'b4\'b6\'a8\'d2\'e5\'bf\'c9\'d1\'a1\'b3\'c9\'d4\'b1\'a1\'a3
\f0 \
  //
\f1 \'d7\'a2\'d2\'e2\'a3\'ba\'bf\'c9\'d1\'a1\'d0\'ad\'d2\'e9\'d6\'bb\'c4\'dc\'d4\'da\'ba\'ac\'d3\'d0
\f0 @objc
\f1 \'c7\'b0\'d7\'ba\'b5\'c4\'d0\'ad\'d2\'e9\'d6\'d0\'c9\'fa\'d0\'a7\'a1\'a3\'c7\'d2
\f0 @objc
\f1 \'b5\'c4\'d0\'ad\'d2\'e9\'d6\'bb\'c4\'dc\'b1\'bb\'c0\'e0\'d7\'f1\'d1\'ad
\f0 \
\
@objc protocol CounterDataSource  //@objc
\f1 \'d6\'bb\'d3\'c3\'d3\'da\'c0\'e0
\f0 \
\{\
    optional func incrementForCount(count: Int) -> Int\
    optional var fixedIncrement: Int \{get\}\
\}\
\
//CounterDataSource
\f1 \'ba\'ac\'d3\'d0
\f0 incrementForCount
\f1 \'b5\'c4\'bf\'c9\'d1\'a1\'b7\'bd\'b7\'a8\'ba\'cd
\f0 fixedIncrement
\f1 \'b5\'c4\'bf\'c9\'d1\'a1\'ca\'f4\'d0\'d4
\f0 \
//
\f1 \'d7\'a2\'d2\'e2\'a3\'ba
\f0 CounterDataSource
\f1 \'b5\'c4\'ca\'f4\'d0\'d4\'ba\'cd\'b7\'bd\'b7\'a8\'b6\'bc\'ca\'c7\'bf\'c9\'d1\'a1\'b5\'c4\'a3\'ac\'d2\'f2\'b4\'cb\'bf\'c9\'d2\'d4\'d4\'da\'c0\'e0\'d6\'d0\'c9\'f9\'c3\'f7\'b5\'ab\'b2\'bb\'ca\'b5\'cf\'d6\'d5\'e2\'d0\'a9\'b3\'c9\'d4\'b1\'a3\'ac\'be\'a1\'b9\'dc\'bc\'bc\'ca\'f5\'c9\'cf\'d4\'ca\'d0\'ed\'d5\'e2\'d1\'f9\'d7\'f6\'a3\'ac\'b2\'bb\'b9\'fd\'d7\'ee\'ba\'c3\'b2\'bb\'d2\'aa\'d5\'e2\'d1\'f9\'d7\'f6\'a1\'a3
\f0 \
\
@objc class Counter\
\{\
    var count = 0\
    var dataSource: CounterDataSource?\
    func increment()\
    \{\
        if let amount = dataSource?.incrementForCount?(count)  //
\f1 \'bc\'b4\'ca\'b9
\f0 dataSource
\f1 \'b4\'e6\'d4\'da\'a3\'ac\'b5\'ab\'d2\'b2\'b2\'bb\'c4\'dc\'b1\'a3\'d6\'a4\'c6\'e4\'ca\'c7\'b7\'f1\'ca\'b5\'cf\'d6\'c1\'cb
\f0 incrementForCount
\f1 \'b7\'bd\'b7\'a8\'a3\'ac\'d2\'f2\'b4\'cb
\f0 incrementForCount
\f1 \'b7\'bd\'b7\'a8\'ba\'f3\'c3\'e6\'d2\'aa\'bc\'d3
\f0 (?)
\f1 \'b1\'ea\'bc\'c7
\f0 \
        \{\
            count += amount\
        \}\
        else if let amount = dataSource?.fixedIncrement?\
        \{\
            count += amount\
        \}\
    \}\
\}\
\
class ThreeSource: CounterDataSource  //
\f1 \'ca\'b5\'cf\'d6\'c1\'cb\'d0\'ad\'d2\'e9
\f0 \
\{\
    let fixedIncrement = 3\
\}\
\
var counter = Counter()\
counter.dataSource = ThreeSource()\
for _ in 1...4\
\{\
    counter.increment()\
    println(counter.count)\
\}\
\
class TowardsZeroSource: CounterDataSource\
\{\
    func incrementForCount(count: Int) -> Int\
    \{\
        if count == 0\
        \{\
            return 0\
        \}\
        else if count < 0\
        \{\
            return 1\
        \}\
        else\
        \{\
            return -1\
        \}\
    \}\
\}\
\
counter.count = -4\
counter.dataSource = TowardsZeroSource()\
for _ in 1...5\
\{\
    counter.increment()\
    println(counter.count)\
\}\
\
}