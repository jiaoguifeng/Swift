{\rtf1\ansi\ansicpg1252\cocoartf1343\cocoasubrtf160
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset134 STHeitiSC-Light;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww22620\viewh18160\viewkind0
\deftab866
\pard\tx866\pardeftab866\pardirnatural

\f0\fs36 \cf0 \CocoaLigature0 2.20 
\f1 \'c0\'a9\'d5\'b9\'d1\'a7\'cf\'b0\'b1\'ca\'bc\'c7
\f0 \
\
import Foundation\
\
/* 
\f1 \'c0\'a9\'d5\'b9
\f0  */\
/*\
  
\f1 \'c0\'a9\'d5\'b9\'be\'cd\'ca\'c7\'cf\'f2\'d2\'bb\'b8\'f6\'d2\'d1\'d3\'d0\'b5\'c4\'c0\'e0\'a3\'ac\'bd\'e1\'b9\'b9\'cc\'e5\'a3\'ac\'bb\'f2\'d5\'df\'c3\'b6\'be\'d9\'c0\'e0\'d0\'cd\'cc\'ed\'bc\'d3\'d0\'c2\'b9\'a6\'c4\'dc
\f0 (functionlity)
\f1 \'a1\'a3\'d5\'e2\'be\'e4\'bb\'b0\'d4\'da\'c3\'bb\'d3\'d0\'c8\'a8\'cf\'de\'bb\'f1\'c8\'a1\'d4\'ad\'ca\'bc\'b4\'fa\'c2\'eb\'b5\'c4\'c7\'e9\'bf\'f6\'cf\'c2\'c0\'a9\'d5\'b9\'c0\'e0\'d0\'cd\'b5\'c4\'c4\'dc\'c1\'a6
\f0 (
\f1 \'bc\'b4\'c4\'e6\'cf\'f2\'bd\'a8\'c4\'a3
\f0 )
\f1 \'a1\'a3\'c0\'a9\'d5\'b9\'ba\'cd
\f0 objective-c
\f1 \'d6\'d0\'b5\'c4\'b7\'d6\'c0\'e0
\f0 (catogories)
\f1 \'c0\'e0\'cb\'c6\'a1\'a3
\f0 (
\f1 \'b2\'bb\'b9\'fd\'d3\'eb
\f0 objectiv-c
\f1 \'b2\'bb\'cd\'ac\'b5\'c4\'ca\'c7\'a3\'ac
\f0 Swift
\f1 \'b5\'c4\'c0\'a9\'d5\'b9\'c3\'bb\'d3\'d0\'c3\'fb\'d7\'d6\'a1\'a3
\f0 )\
\
Swift
\f1 \'d6\'d0\'b5\'c4\'c0\'a9\'d5\'b9\'bf\'c9\'d2\'d4\'a3\'ba
\f0 \
1.
\f1 \'cc\'ed\'bc\'d3\'bc\'c6\'cb\'e3\'d0\'cd\'ca\'f4\'d0\'d4\'ba\'cd\'bc\'c6\'cb\'e3\'be\'b2\'cc\'ac\'ca\'f4\'d0\'d4
\f0 \
2.
\f1 \'b6\'a8\'d2\'e5\'ca\'b5\'c0\'fd\'b7\'bd\'b7\'a8\'ba\'cd\'c0\'e0\'d0\'cd\'b7\'bd\'b7\'a8
\f0 \
3.
\f1 \'cc\'e1\'b9\'a9\'d0\'c2\'b5\'c4\'b9\'b9\'d4\'ec\'c6\'f7
\f0 \
4.
\f1 \'b6\'a8\'d2\'e5\'cf\'c2\'b1\'ea
\f0 \
5.
\f1 \'b6\'a8\'d2\'e5\'ba\'cd\'ca\'b9\'d3\'c3\'d0\'c2\'b5\'c4\'c7\'b6\'cc\'d7\'c0\'e0\'d0\'cd
\f0 \
6.
\f1 \'ca\'b9\'d2\'bb\'b8\'f6\'d2\'d1\'d3\'d0\'c0\'e0\'d0\'cd\'b7\'fb\'ba\'cf\'c4\'b3\'b8\'f6\'bd\'d3\'bf\'da
\f0 \
\

\f1 \'d7\'a2\'d2\'e2\'a3\'ba\'c8\'e7\'b9\'fb\'c4\'e3\'b6\'a8\'d2\'e5\'c1\'cb\'d2\'bb\'b8\'f6\'c0\'a9\'d5\'b9\'cf\'f2\'d2\'bb\'b8\'f6\'d2\'d1\'d3\'d0\'c0\'e0\'d0\'cd\'cc\'ed\'bc\'d3\'d0\'c2\'b9\'a6\'c4\'dc\'a3\'ac\'c4\'c7\'c3\'b4\'d5\'e2\'b8\'f6\'d0\'c2\'b9\'a6\'c4\'dc\'b6\'d4\'b8\'c3\'c0\'e0\'d0\'cd\'b5\'c4\'cb\'f9\'d3\'d0\'d2\'d1\'d3\'d0\'ca\'b5\'c0\'fd\'d6\'d0\'b6\'bc\'ca\'c7\'bf\'c9\'d3\'c3\'b5\'c4\'a3\'ac\'bc\'b4\'ca\'b9\'cb\'fb\'c3\'c7\'ca\'c7\'d4\'da\'c4\'e3\'b5\'c4\'d5\'e2\'b8\'f6\'c0\'a9\'d5\'b9\'b5\'c4\'c7\'b0\'c3\'e6\'b6\'a8\'d2\'e5\'b5\'c4
\f0 \
*/\
\
//
\f1 \'c0\'a9\'d5\'b9\'d3\'ef\'b7\'a8
\f0 (Extension Syntax)\
   //
\f1 \'c9\'f9\'c3\'f7\'d2\'bb\'b8\'f6\'c0\'a9\'d5\'b9\'ca\'b9\'d3\'c3\'b9\'d8\'bc\'fc\'d7\'d6
\f0 extension\
        //extension SomeType\
        //\{\
        //    //
\f1 \'bc\'d3\'b5\'bd
\f0 SomeType
\f1 \'b5\'c4\'d0\'c2\'b9\'a6\'c4\'dc\'d0\'b4\'b5\'bd\'d5\'e2\'c0\'ef
\f0 \
        //\}\
\
/*\
   
\f1 \'d2\'bb\'b8\'f6\'c0\'a9\'d5\'b9\'bf\'c9\'d2\'d4\'c0\'a9\'d5\'b9\'d2\'bb\'b8\'f6\'d2\'d1\'d3\'d0\'c0\'e0\'d0\'cd\'a3\'ac\'ca\'b9\'c6\'e4\'c4\'dc\'b9\'bb\'ca\'ca\'c5\'e4\'d2\'bb\'b8\'f6\'bb\'f2\'b6\'e0\'b8\'f6\'d0\'ad\'d2\'e9
\f0 (protocol).
\f1 \'b5\'b1\'d5\'e2\'b8\'f6\'c7\'e9\'bf\'f6\'b7\'a2\'c9\'fa\'ca\'b1\'a3\'ac\'bd\'d3\'bf\'da\'b5\'c4\'c3\'fb\'d7\'d6\'d3\'a6\'b8\'c3\'cd\'ea\'c8\'ab\'b0\'b4\'d5\'d5\'c0\'e0\'ba\'cd\'bd\'e1\'b9\'b9\'cc\'e5\'b5\'c4\'c3\'fb\'d7\'d6\'b5\'c4\'b7\'bd\'ca\'bd\'bd\'f8\'d0\'d0\'ca\'e9\'d0\'b4
\f0 \
*/\
//        extension SomeType: SomeProtocol,Anotherprotocol\
//        \{\
//            //
\f1 \'d0\'ad\'d2\'e9\'ca\'b5\'cf\'d6\'d0\'b4\'d4\'da\'d5\'e2\'c0\'ef
\f0 \
//        \}\
\
//
\f1 \'bc\'c6\'cb\'e3\'d0\'cd\'ca\'f4\'d0\'d4
\f0 \
extension Double\
\{\
    var km: Double\
    \{\
        return self*1_000.0\
    \}\
    \
    var m: Double\
    \{\
            return self\
    \}\
    \
    var cm: Double\
    \{\
            return self/100.0\
    \}\
    \
    var mm: Double\
    \{\
            return self/1000.0\
    \}\
    \
    var ft: Double\
    \{\
            return self/3.28084\
    \}\
\}\
\
let oneInch = 25.4.mm\
println("One inch is \\(oneInch) meters")\
\
let threeFeet = 3.ft\
println("Three feet is \\(threeFeet) meters")\
\
let aMarathon = 42.km + 195.m\
println("A marathon is \\(aMarathon) meters long")\
/*\

\f1 \'d7\'a2\'d2\'e2\'a3\'ba\'c0\'a9\'d5\'b9\'bf\'c9\'d2\'d4\'cc\'ed\'bc\'d3\'d0\'c2\'b5\'c4\'bc\'c6\'cb\'e3\'ca\'f4\'d0\'d4\'a3\'ac\'b5\'ab\'ca\'c7\'b2\'bb\'bf\'c9\'d2\'d4\'cc\'ed\'bc\'d3\'b4\'e6\'b4\'a2\'ca\'f4\'d0\'d4\'a3\'ac\'d2\'b2\'b2\'bb\'bf\'c9\'d2\'d4\'cf\'f2\'d2\'d1\'d3\'d0\'ca\'f4\'d0\'d4\'cc\'ed\'bc\'d3\'ca\'f4\'d0\'d4\'b9\'db\'b2\'e2\'c6\'f7
\f0 (property observers)\
*/\
\
\
//
\f1 \'b9\'b9\'d4\'ec\'c6\'f7
\f0 (initializers)\
   //
\f1 \'c0\'a9\'d5\'b9\'bf\'c9\'d2\'d4\'cf\'f2\'d2\'d1\'d3\'d0\'c0\'e0\'cc\'ed\'bc\'d3\'d0\'c2\'b5\'c4\'b9\'b9\'d4\'ec\'c6\'f7\'a1\'a3\'d5\'e2\'bf\'c9\'d2\'d4\'c8\'c3\'c4\'e3\'c0\'a9\'d5\'b9\'c6\'e4\'cb\'fb\'c0\'e0\'d0\'cd\'a3\'ac\'bd\'ab\'c4\'fa\'d7\'d4\'bc\'ba\'b5\'c4\'b6\'a8\'d6\'c6\'c0\'e0\'d0\'cd\'d7\'f7\'ce\'aa\'b9\'b9\'d4\'ec\'c6\'f7\'b2\'ce\'ca\'fd\'a3\'ac\'bb\'f2\'d5\'df\'cc\'e1\'b9\'a9\'b8\'c3\'c0\'e0\'d0\'cd\'b5\'c4\'d4\'ad\'ca\'bc\'ca\'b5\'cf\'d6\'d6\'d0\'c3\'bb\'d3\'d0\'b0\'fc\'ba\'ac\'b5\'c4\'b6\'ee\'cd\'e2\'b3\'f5\'ca\'bc\'bb\'af\'d1\'a1\'cf\'ee
\f0 \
struct Size \
\{\
    var width = 0.0, height = 0.0\
\}\
\
struct Point\
\{\
    var x = 0.0, y = 0.0\
\}\
\
struct Rect\
\{\
    var origin = Point()\
    var size = Size()\
\}\
\
let defaultRect = Rect()\
let memberwiseRect = Rect(origin: Point(x: 2.0, y: 2.0), size: Size(width: 5.0, height: 5.0))\
\
\
extension Rect\
\{\
    init(center: Point, size: Size)\
    \{\
        let originX = center.x - (size.width/2)\
        let originY = center.y - (size.height/2)\
        self.init(origin: Point(x: originX, y: originY),size: size)\
     \}\
\}\
\
let centerRect = Rect(center: Point(x: 4.0, y: 4.0), size: Size(width: 3.0, height: 3.0))\
\
//
\f1 \'d7\'a2\'d2\'e2\'a3\'ba\'c8\'e7\'b9\'fb\'c4\'e3\'ca\'b9\'d3\'c3\'c0\'a9\'d5\'b9\'cc\'e1\'b9\'a9\'c1\'cb\'d2\'bb\'b8\'f6\'d0\'c2\'b5\'c4\'b9\'b9\'d4\'ec\'c6\'f7\'a3\'ac\'c4\'e3\'d2\'c0\'c8\'bb\'d3\'d0\'d6\'b0\'d4\'f0\'b1\'a3\'d6\'a4\'b9\'b9\'d4\'ec\'b9\'fd\'b3\'cc\'d6\'d0\'c4\'dc\'b9\'bb\'c8\'c3\'cb\'f9\'d3\'d0\'ca\'b5\'c0\'fd\'cd\'ea\'c8\'ab\'b3\'f5\'ca\'bc\'bb\'af
\f0 \
\
//
\f1 \'b7\'bd\'b7\'a8
\f0 (Method)\
  //
\f1 \'c0\'a9\'d5\'b9\'bf\'c9\'d2\'d4\'cf\'f2\'d2\'d1\'d3\'d0\'c0\'e0\'d0\'cd\'cc\'ed\'bc\'d3\'d0\'c2\'b5\'c4\'ca\'b5\'c0\'fd\'b7\'bd\'b7\'a8\'ba\'cd\'c0\'e0\'d0\'cd\'b7\'bd\'b7\'a8
\f0 \
extension Int\
\{\
    func repetitions(#task: () -> ())  //\
    \{\
        for i in 0..<self\
        \{\
            task()\
        \}\
    \}\
\}\
\
//3.repetitions(\
//    \{\
//        println("hello world")\
//    \}\
//)\
\
3.repetitions(task: \{println("hello world")\})\
3.repetitions\{println("Goodbye!!!")\}  //trailing
\f1 \'b1\'d5\'b0\'fc
\f0 \
\
//
\f1 \'d0\'de\'b8\'c4\'ca\'b5\'c0\'fd\'b7\'bd\'b7\'a8
\f0 (Mutating Instance Methods)\
  //
\f1 \'cd\'a8\'b9\'fd\'c0\'a9\'d5\'b9\'cc\'ed\'bc\'d3\'b5\'c4\'ca\'b5\'c0\'fd\'b7\'bd\'b7\'a8\'d2\'b2\'bf\'c9\'d2\'d4\'d0\'de\'b8\'c4\'ca\'b5\'c0\'fd\'b7\'bd\'b7\'a8\'a1\'a3\'bd\'e1\'b9\'b9\'cc\'e5\'ba\'cd\'c3\'b6\'be\'d9\'c0\'e0\'d0\'cd\'d6\'d0\'b5\'c4\'d0\'de\'b8\'c4
\f0 self
\f1 \'bb\'f2\'c6\'e4\'ca\'f4\'d0\'d4\'b5\'c4\'b7\'bd\'b7\'a8\'b1\'d8\'d0\'eb\'bd\'ab\'b8\'c3\'ca\'b5\'c0\'fd\'b7\'bd\'b7\'a8\'b1\'ea\'d7\'a2\'b3\'c9
\f0 mutating
\f1 \'a3\'ac\'d5\'fd\'c8\'e7\'c0\'b4\'d7\'d4\'d4\'ad\'ca\'bc\'ca\'b5\'cf\'d6\'b5\'c4\'d0\'de\'b8\'c4\'b7\'bd\'b7\'a8\'d2\'bb\'d1\'f9\'a1\'a3
\f0 \
extension Int\
\{\
    mutating func square()  //
\f1 \'d0\'de\'b8\'c4
\f0 self
\f1 \'d6\'b5
\f0  
\f1 \'bc\'d3
\f0 mutating\
    \{\
        self = self * self\
    \}\
\}\
\
var someInt = 3\
someInt.square()\
println(someInt)\
\
//
\f1 \'cf\'c2\'b1\'ea
\f0 (Subscripts)\
  //
\f1 \'c0\'a9\'d5\'b9\'bf\'c9\'d2\'d4\'cf\'f2\'d2\'bb\'b8\'f6\'d2\'d1\'d3\'d0\'c0\'e0\'d0\'cd\'cc\'ed\'bc\'d3\'cf\'c2\'b1\'ea\'a1\'a3\'cf\'c2\'c3\'e6\'b5\'c4\'c0\'fd\'d7\'d3\'cf\'f2
\f0 Swift
\f1 \'c4\'da\'bc\'e9\'c0\'e0\'d0\'cd
\f0 Int
\f1 \'cc\'ed\'bc\'d3\'c1\'cb\'d2\'bb\'b8\'f6\'d5\'fb\'d0\'cd\'cf\'c2\'b1\'ea\'a1\'a3\'b8\'c3\'cf\'c2\'b1\'ea
\f0 [n]
\f1 \'b7\'b5\'bb\'d8\'ca\'ae\'bd\'f8\'d6\'c6\'ca\'fd\'d7\'d6\'b4\'d3\'d3\'d2\'b5\'bd\'d7\'f3\'b5\'c4\'b5\'da
\f0 n
\f1 \'b8\'f6\'ca\'fd\'d7\'d6
\f0 \
\
extension Int\
\{\
    subscript(var digitIndex: Int) -> Int\
    \{\
        var decimalBase = 1\
        while digitIndex > 0\
        \{\
            decimalBase *= 10\
            --digitIndex\
        \}\
        \
        return (self / decimalBase) % 10\
    \}\
\}\
\
println(746381295[0])\
\
println(746381295[1])\
\
println(746381295[2])\
\
println(746381295[8])\
\
println(746381295[10])  //0\
\
//
\f1 \'c7\'b6\'cc\'d7\'c0\'e0\'d0\'cd
\f0 (Nested Types)\
  //
\f1 \'c0\'a9\'d5\'b9\'bf\'c9\'d2\'d4\'cf\'f2\'d2\'d1\'d3\'d0\'b5\'c4\'c0\'e0\'a3\'ac\'bd\'e1\'b9\'b9\'cc\'e5\'ba\'cd\'c3\'b6\'be\'d9\'cc\'ed\'bc\'d3\'d0\'c2\'b5\'c4\'c7\'b6\'cc\'d7\'c0\'e0\'d0\'cd
\f0 \
\
extension Character\
\{\
    enum Kind\
    \{\
        case Vowel, Consonant, Other\
    \}\
    \
    var kind: Kind\
    \{\
        switch String(self).lowercaseString\
        \{\
            case "a", "e", "i", "o", "u":\
                return .Vowel\
            case "b", "c", "d", "f", "g", "h", "j", "k", "l", "m", "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z":\
                return .Consonant\
            default:\
                return .Other\
        \}\
    \}\
    \
\}\
\
\
\
}